--------------------------------------------------------
--  DDL for Trigger TRG_SDB_ACC_TURNO_HIST_INS_AFTER 
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_SDB_ACC_TURNO_HIST_INS_AFTER" 
-- Crear registro de Bitacora en la tabla SDB_ACC_BITACORA_BLOQUEO
--FOR Insert 
AFTER INSERT ON SDB_ACC_TURNO_HISTORIA 
FOR EACH ROW
--COMPOUND TRIGGER
/*
Nombre: TRG_SDB_ACC_TURNO_HIST_INS_AFTER

Objeto: Crear registro de Bitacora en la tabla SDB_ACC_BITACORA_BLOQUEO, para el bloqueo de turnos de la tabla SDB_ACC_TURNO_HISTORIA
        Actualiza el estado de la solicitud
        Actualiza la etapa de la solicitud
Descripcion:
    1.Crear registro de SDB_ACC_BITACORA_BLOQUEO, cuando el registro ingrese BLOQUEADO 

Retorno: Registro Actualizado
*/
declare
	VUSER_XCEP				EXCEPTION;
	PRAGMA EXCEPTION_INIT (VUSER_XCEP,-20001 );
	VID_TURNO				  SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE;
  VESTADO_BQ        SDB_ACC_BITACORA_BLOQUEO.ESTADO%TYPE;
  VPENDIENTE				NUMBER;
  njob              NUMBER(15);
  sProcedimiento    VARCHAR2(500);
  RRETORNO          INTEGER;
  VRETORNO          INTEGER;
  RMENSAJE          VARCHAR2(500);
  VMENSAJE          VARCHAR2(500);
  VESTADO           NUMBER;
  VSQL              varchar2(4000);
  VCONTEO           integer;
  VCONTEO_MAT       integer;
  VCONTEO_0463      integer := 0;
  VORDEN            INTEGER;
  VID_TURNO_HISTORIA  SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE;
  VID_USUARIO_ACCION  SDB_ACC_TURNO_HISTORIA.ID_USUARIO_CREACION%TYPE;
  VIP_ACCION          SDB_ACC_TURNO_HISTORIA.IP_CREACION%TYPE;
  VID_SOLICITUD       SDB_ACC_TURNO_HISTORIA.ID_SOLICITUD%TYPE;
  VTURNO_BLOQUEO      SDB_ACC_TURNO.ID_TURNO%TYPE;
  VID_BITACORA_BLOQUEO SDB_ACC_BITACORA_BLOQUEO.ID_BITACORA_BLOQUEO%type;
/*
CurBloqueados SYS_REFCURSOR;

TYPE TYP_REC IS RECORD
    (
     ID_CIRCULO    SDB_BNG_PREDIO_REGISTRO.ID_CIRCULO%TYPE, 
     ID_MATRICULA  SDB_BNG_PREDIO_REGISTRO.ID_MATRICULA%TYPE
    );
    VREC TYP_REC;
*/
/*CURSOR CurBloqueados IS
	SELECT DISTINCT ID_CIRCULO,ID_MATRICULA
	FROM SDB_ACC_SOLICITUD_MATRICULA_ACTO MAT
	WHERE MAT.ID_TURNO = VID_TURNO
    AND MAT.ESTADO != 'I'
		AND NOT EXISTS (SELECT 1 
						FROM SDB_ACC_BITACORA_BLOQUEO BQ 
            INNER JOIN ( SELECT ID_TURNO_BLOQUEO, MAX(ID_BITACORA_BLOQUEO) ID_BITACORA 
                          FROM SDB_ACC_BITACORA_BLOQUEO 
                          GROUP BY ID_TURNO_BLOQUEO ) VQ ON VQ.ID_BITACORA = BQ.ID_BITACORA_BLOQUEO
						WHERE BQ.ID_CIRCULO = MAT.ID_CIRCULO 
							AND BQ.ID_MATRICULA = MAT.ID_MATRICULA 
							AND BQ.ESTADO IN ('BLOQUEADO','ACTIVO') 
							AND BQ.ID_TURNO_BLOQUEO = MAT.ID_TURNO);
*/
--AFTER EACH ROW IS
BEGIN
/* INACTIVACION DE ALERTAS DE TURNO DESESTIMIENTO Y RESTITUCION
3	EN TRAMITE DE DESISTIMIENTO       39	DESISTIMIENTO
5	EN TRAMITE DE RESTITUCION         43	RESTITUCION
*/
--DBMS_OUTPUT.PUT_LINE('TRG_SDB_ACC_TURNO_HIST_INS_AFTER:: NEW.ID_TURNO_HISTORIA:' ||:NEW.ID_TURNO_HISTORIA||', NEW.ESTADO_ACTIVIDAD'||:NEW.ESTADO_ACTIVIDAD||', NEW.ID_TURNO:'||:NEW.ID_TURNO);
  IF :NEW.ID_ETAPA >= 200 AND :NEW.ID_ETAPA <= 250 THEN -- SDB_ACC_TURNO_HISTORIA
    BEGIN
      SELECT COUNT(*) INTO VCONTEO
      FROM SDB_ACC_SOLICITUD_ASOCIADA ASA
      INNER JOIN SDB_ACC_SOLICITUD SOL ON ASA.ID_SOLICITUD1 = SOL.ID_SOLICITUD 
      WHERE ASA.ID_SOLICITUD = :NEW.ID_SOLICITUD
       AND SOL.ID_PROCESO = '39';
       IF VCONTEO > 0 THEN
        PKG_REGISTRO.PROC_INACTIVAR_ALERTA_TURNOS(:NEW.ID_TURNO,SYSTIMESTAMP,'3',:NEW.ID_USUARIO_CREACION,:NEW.IP_CREACION,RRETORNO,RMENSAJE);
       END IF;
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      NULL;
    WHEN OTHERS THEN
       PKG_TRANSVERSALES.PROC_BITACORA('TRG_SDB_ACC_TURNO_HIST_UPD_AFTER','.SELECT, -2. BUSCANDO ALERTAS PARA INACTIVAR:'||TO_CHAR(:NEW.ID_TURNO) ||'. '|| SQLERRM ,NVL(:NEW.ID_USUARIO_CREACION,USER),NVL(:NEW.IP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION()),NULL,NULL,NULL,'INSERT',null,null,'BLOQUEADO',NULL,NULL,:NEW.ID_SOLICITUD,VID_TURNO,:NEW.ID_TURNO_HISTORIA,'TRG_SDB_ACC_TURNO_HIST_UPD_AFTER',RRETORNO,RMENSAJE);
    END;
    BEGIN
      SELECT COUNT(*) INTO VCONTEO
      FROM SDB_ACC_SOLICITUD_ASOCIADA ASA
      INNER JOIN SDB_ACC_SOLICITUD SOL ON ASA.ID_SOLICITUD1 = SOL.ID_SOLICITUD 
      WHERE ASA.ID_SOLICITUD = :NEW.ID_SOLICITUD
       AND SOL.ID_PROCESO = '43';
      IF VCONTEO > 0 THEN
        PKG_REGISTRO.PROC_INACTIVAR_ALERTA_TURNOS(:NEW.ID_TURNO,SYSTIMESTAMP,'5',:NEW.ID_USUARIO_CREACION,:NEW.IP_CREACION,RRETORNO,RMENSAJE);
       END IF;
    EXCEPTION 
    WHEN NO_DATA_FOUND THEN
      NULL;
    WHEN OTHERS THEN
       PKG_TRANSVERSALES.PROC_BITACORA('TRG_SDB_ACC_TURNO_HIST_UPD_AFTER','.SELECT, -2. BUSCANDO ALERTAS PARA INACTIVAR:'||TO_CHAR(:NEW.ID_TURNO) ||'. '|| SQLERRM ,NVL(:NEW.ID_USUARIO_CREACION,USER),NVL(:NEW.IP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION()),NULL,NULL,NULL,'INSERT',null,null,'BLOQUEADO',NULL,NULL,:NEW.ID_SOLICITUD,VID_TURNO,:NEW.ID_TURNO_HISTORIA,'TRG_SDB_ACC_TURNO_HIST_UPD_AFTER',RRETORNO,RMENSAJE);
    END;
  END IF; 
--27/01/2022 se elimina codigo de bloqueo y desbloqueo de matriculas, para hacerlo en la creaci√≥n del turno.

	UPDATE SDB_ACC_SOLICITUD_ETAPA_ACTUAL SET
		ESTADO = 'I'
	WHERE ID_SOLICITUD = :NEW.ID_SOLICITUD
		AND ID_TURNO = NVL(:NEW.ID_TURNO,'-1');
	VPENDIENTE := sql%rowcount;

	IF VPENDIENTE = 0 THEN
		INSERT INTO SDB_ACC_SOLICITUD_ETAPA_ACTUAL (ID_SOLICITUD,ID_TURNO,ESTADO)
		VALUES (:NEW.ID_SOLICITUD,NVL(:NEW.ID_TURNO,'-1'),'I');
	END IF;
  /*ACTUALIZA EL ESTADO DE SDB_ACC_SOLICITUD DEPENDIENDO DE LA ETAPA*/
  VESTADO := CASE WHEN :NEW.ID_TURNO IS NULL AND :NEW.ID_ETAPA = 10 THEN 1 ELSE 0 END;
 -- PROC_ESTADO_SOLICITUD(:NEW.ID_SOLICITUD, VESTADO,:NEW.ID_USUARIO_CREACION,:NEW.IP_CREACION,RRETORNO,RMENSAJE);
 
  IF NVL(:NEW.ID_TURNO,'NULL') <> 'NULL' THEN 
    BEGIN
    sProcedimiento := 'DECLARE RRETORNO INTEGER; RMENSAJE VARCHAR2(500); BEGIN PKG_REGISTRO.PROC_ACTUALIZAR_ETAPA_TURNO(''' || :NEW.ID_TURNO ||''','''|| :NEW.ID_USUARIO_CREACION||''','''||:NEW.IP_CREACION||''',RRETORNO,RMENSAJE); COMMIT; END;';
    dbms_job.submit(job => njob,
                       what => sProcedimiento,
                       next_date => SYSDATE + 1/(24*60*60), -- Lo programa para dentro un segundo
                       interval => NULL); -- Sin repeticion
    --COMMIT;
    END;    
  END IF;
  BEGIN
    sProcedimiento := 'DECLARE RRETORNO INTEGER; RMENSAJE VARCHAR2(500); BEGIN PKG_REGISTRO.PROC_ACTUALIZAR_ETAPA(''' || :NEW.ID_SOLICITUD ||''','''|| :NEW.ID_USUARIO_CREACION||''','''||:NEW.IP_CREACION||''',RRETORNO,RMENSAJE); COMMIT; END;';
    dbms_job.submit(job => njob,
                       what => sProcedimiento,
                       next_date => SYSDATE + 1/(24*60*60), -- Lo programa para dentro un segundo
                       interval => NULL); -- Sin repeticion
    --COMMIT;
  END;
  BEGIN
    sProcedimiento := 'DECLARE RRETORNO INTEGER; RMENSAJE VARCHAR2(500); BEGIN PKG_REGISTRO.PROC_ESTADO_SOLICITUD(''' || :NEW.ID_SOLICITUD ||''','||VESTADO ||','''|| :NEW.ID_USUARIO_CREACION ||''','''||:NEW.IP_CREACION||''',RRETORNO,RMENSAJE); COMMIT; END;';
    dbms_job.submit(job => njob,
                       what => sProcedimiento,
                       next_date => SYSDATE + 1/(24*60*60), -- Lo programa para dentro un segundo
                       interval => NULL); -- Sin repeticion
    --COMMIT;
  END;

  VID_TURNO_HISTORIA := :NEW.ID_TURNO_HISTORIA;
  VID_USUARIO_ACCION := :NEW.ID_USUARIO_CREACION;
  VIP_ACCION := :NEW.IP_CREACION;
  VID_SOLICITUD := :NEW.ID_SOLICITUD;
      BEGIN 
       sProcedimiento := 'DECLARE RRETORNO INTEGER; RMENSAJE VARCHAR2(500); BEGIN 
        PKG_REGISTRO.PROC_CREA_MENSAJE_ALERTA_TITULARES('||
              VID_TURNO_HISTORIA ||','''|| VID_USUARIO_ACCION||''','''||VIP_ACCION||''',RRETORNO,RMENSAJE); COMMIT; END;';
        dbms_job.submit(job => njob,
                        what => sProcedimiento,
                        next_date => SYSDATE + 1/(24*60*60), -- Lo programa para dentro un segundo
                        interval => NULL); -- Sin repeticion
    --COMMIT;

    END;
    DECLARE VCONTEO_MEN INTEGER := 0;
    BEGIN
      SELECT COUNT(*) INTO VCONTEO_MEN FROM SDB_PGN_PLANTILLA_COMUNICACION WHERE ID_PROCESO = :NEW.ID_PROCESO AND ID_ETAPA_ACTUAL = :NEW.ID_ETAPA;
      IF VCONTEO_MEN > 0 THEN
        begin
          sProcedimiento := 'DECLARE RRETORNO INTEGER; RMENSAJE VARCHAR2(500); BEGIN PKG_TRANSVERSALES.PROC_MENSAJE_COMUNICACION ('||
                              VID_TURNO_HISTORIA ||','''|| VID_USUARIO_ACCION||''','''||VIP_ACCION||''',RRETORNO,RMENSAJE); COMMIT; END;';
            dbms_job.submit(job => njob,
                            what => sProcedimiento,
                            next_date => SYSDATE + 1/(24*60*60), -- Lo programa para dentro un segundo
                            interval => NULL); -- Sin repeticion
        end;
      END IF;
      EXCEPTION WHEN NO_DATA_FOUND THEN NULL;
                WHEN OTHERS THEN 
                  PKG_TRANSVERSALES.PROC_BITACORA('TRG_SDB_ACC_TURNO_HIST_INS_AFTER','.SELECT, -50. ERROR LEYENDO SDB_PGN_PLANTILLA_COMUNICACION REGISTRANDO ENVIO DE COMUNICADO:'||TO_CHAR(:NEW.ID_TURNO_HISTORIA)||'.'||SQLERRM,NVL(:NEW.ID_USUARIO_CREACION,USER),NVL(:NEW.IP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION()),NULL,NULL,NULL,'INSERT',null,null,'BLOQUEADO',NULL,NULL,:NEW.ID_SOLICITUD,:NEW.ID_TURNO,TO_CHAR(:NEW.ID_TURNO_HISTORIA),'TRG_SDB_ACC_TURNO_HIST_INS_AFTER',RRETORNO,RMENSAJE);
    END;
	EXCEPTION WHEN OTHERS THEN
	RAISE VUSER_XCEP;
 --END AFTER EACH ROW;

/*  AFTER STATEMENT IS 
    BEGIN 
--      PKG_REGISTRO.PROC_ESTADO_SOLICITUD(VID_SOLICITUD,VESTADO,VID_USUARIO_ACCION,VIP_ACCION,VRETORNO,VMENSAJE);

--      PKG_REGISTRO.PROC_ACTUALIZAR_ETAPA(VID_SOLICITUD,VID_USUARIO_ACCION,VIP_ACCION,VRETORNO,VMENSAJE);

    BEGIN
        PKG_REGISTRO.PROC_CREA_MENSAJE_ALERTA_TITULARES(
              VID_TURNO_HISTORIA,
              VID_USUARIO_ACCION,
              VIP_ACCION,
              VRETORNO,
              VMENSAJE
      );
    END;
  END AFTER STATEMENT;*/

END TRG_SDB_ACC_TURNO_HIST_INS_AFTER;
/
ALTER TRIGGER "TRG_SDB_ACC_TURNO_HIST_INS_AFTER" ENABLE;