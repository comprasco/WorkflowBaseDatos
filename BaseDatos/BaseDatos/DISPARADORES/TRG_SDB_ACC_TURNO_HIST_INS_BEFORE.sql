--------------------------------------------------------
--  DDL for Trigger TRG_SDB_ACC_TURNO_HIST_INS_BEFORE 
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_SDB_ACC_TURNO_HIST_INS_BEFORE" 
-- Si en el turno intervienen matriculas inconsistentes, el turno historia de la tabla SDB_ACC_TURNO_HISTORIA 
BEFORE INSERT ON SDB_ACC_TURNO_HISTORIA
FOR EACH ROW
/*
Nombre: TRG_SDB_ACC_TURNO_HIST_INS_BEFORE

Objeto: Si en el turno intervienen matriculas inconsistentes, el turno historia de la tabla SDB_ACC_TURNO_HISTORIA queda en estado TERM con motivo 85 matricula inconsistente.

Descripcion:
    1. Validar si para el turno historia hay matriculas con PREDIO_INCONSISTENTE = 'S'
    2. El turno historia dejarlo con estado actividad "TER" Y ID_MOTIVO "85"
    3. Crear nueva etapa 85

*/
DECLARE   
	VUSER_XCEP				EXCEPTION;
	PRAGMA EXCEPTION_INIT (VUSER_XCEP,-20001 );
  VID_TURNO				  SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE;
	VPENDIENTE				NUMBER;
  njob              NUMBER(15);
  sProcedimiento    VARCHAR2(500);
  VID_CIRCULO SDB_ACC_TURNO_HISTORIA.ID_CIRCULO_USUARIO%type;
  RRETORNO          INTEGER;
  RMENSAJE          VARCHAR2(500);
BEGIN
/*CALCULA LA FECHA DE VENCIMIENTO CUANDO LA ETAPA ENTRA A ESTADO DE ASG O ESP*/
  IF :NEW.ESTADO_ACTIVIDAD IN ('ASG', 'ESP','AUT') THEN
    IF NVL(:NEW.ID_CIRCULO_USUARIO,'NULL') = 'NULL' THEN
        BEGIN
          SELECT ID_CIRCULO INTO VID_CIRCULO
          FROM SDB_ACC_TURNO
          WHERE ID_TURNO = :NEW.ID_TURNO;
          EXCEPTION WHEN OTHERS THEN
            VID_CIRCULO := NULL;
        END; 
      ELSE 
        VID_CIRCULO := :NEW.ID_CIRCULO_USUARIO;
    END IF;  
  END IF;
  :NEW.FECHA_VENCIMIENTO := PKG_WORKFLOW.FUNC_VENCIMIENTO_ETAPA(:NEW.ID_ETAPA,VID_CIRCULO,SYSDATE);
/**/
  --IF NVL(:NEW.FECHA_INICIAL,TO_DATE('01/01/1900','DD/MM/RRRR')) <> TO_DATE('01/01/1900','DD/MM/RRRR') THEN
  --  :NEW.FECHA_INICIAL := SYSDATE;
  --END IF;
  IF :NEW.ESTADO_ACTIVIDAD = 'AUT' THEN
   :NEW.FECHA_INICIAL := SYSDATE; 
  END IF; 
  IF :NEW.ID_ETAPA = 15 AND NVL(:NEW.CALIFICACION,'NULL') = 'NULL' THEN
    :NEW.CALIFICACION := 'DISPONIBLE';
  END IF;

  IF NVL(:NEW.ID_DOCUMENTO_SALIDA,0) = 0 THEN
    DECLARE VULT_ID_DOCUMENTO_SALIDA SDB_ACC_TURNO_HISTORIA.ID_DOCUMENTO_SALIDA%TYPE := 0;
    BEGIN
    IF :NEW.ID_ETAPA = 202 THEN
      BEGIN
        SELECT max(ID_DOCUMENTO_SALIDA)
          INTO VULT_ID_DOCUMENTO_SALIDA
        FROM SDB_ACC_DOCUMENTOS_SALIDA
        WHERE ID_TURNO = :NEW.ID_TURNO
          AND TRIM(UPPER(ID_TIPO_DOCUMENTAL)) in ('12','32','61','64','65');
        :NEW.ID_DOCUMENTO_SALIDA := VULT_ID_DOCUMENTO_SALIDA;
        EXCEPTION WHEN OTHERS THEN
        NULL;
      END;
    END IF;
    IF :NEW.ID_ETAPA = 203 THEN
      BEGIN
        SELECT max(ID_DOCUMENTO_SALIDA)
          INTO VULT_ID_DOCUMENTO_SALIDA
        FROM SDB_ACC_DOCUMENTOS_SALIDA
        WHERE ID_TURNO = :NEW.ID_TURNO;
        :NEW.ID_DOCUMENTO_SALIDA := VULT_ID_DOCUMENTO_SALIDA;
        EXCEPTION WHEN OTHERS THEN
        NULL;
      END;
    END IF;
    END;
  END IF;
  IF :NEW.ID_PROCESO = '62' AND :NEW.ID_ETAPA = 800 AND :NEW.ID_MOTIVO = 10 THEN
    BEGIN
      SELECT DESCRIPCION INTO :NEW.MOTIVO
      FROM SDB_PGN_MOTIVO_TRAMITE 
      WHERE ID_PROCESO = :NEW.ID_PROCESO
      AND ID_SUBPROCESO = :NEW.ID_SUBPROCESO
      AND ID_ETAPA_ORIGEN = :NEW.ID_ETAPA
      AND ID_MOTIVO = :NEW.ID_MOTIVO;
      EXCEPTION WHEN OTHERS THEN 
      NULL;
    END;    
  END IF;
  EXCEPTION WHEN OTHERS THEN
  PKG_TRANSVERSALES.PROC_BITACORA('TRG_SDB_ACC_TURNO_HIST_INS_BEFORE','.INSERT, -100. INSERTANDO:'||TO_CHAR(:NEW.ID_TURNO_HISTORIA)||','||SQLERRM,NVL(:NEW.ID_USUARIO_CREACION,USER),NVL(:NEW.IP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION()),NULL,NULL,NULL,'INSERT',NULL,NULL,NULL,NULL,NULL,:NEW.ID_SOLICITUD,:NEW.ID_TURNO,:NEW.ID_TURNO_HISTORIA,'TRG_SDB_ACC_TURNO_HIST_INS_BEFORE',RRETORNO,RMENSAJE);
	RAISE VUSER_XCEP;
END TRG_SDB_ACC_TURNO_HIST_INS_BEFORE;
/
ALTER TRIGGER "TRG_SDB_ACC_TURNO_HIST_INS_BEFORE" ENABLE;