--------------------------------------------------------
--  DDL for Trigger TRG_SDB_ACC_TURNO_HIST_UPD_BEFORE 
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "TRG_SDB_ACC_TURNO_HIST_UPD_BEFORE" 
-- SE CALCULA LA FECHA DE VENCIMIENTO  PARA LA ETAPA DADA.
BEFORE UPDATE ON SDB_ACC_TURNO_HISTORIA
FOR EACH ROW

DECLARE   
	VUSER_XCEP EXCEPTION;
	PRAGMA EXCEPTION_INIT (VUSER_XCEP,-20001 );
  njob              NUMBER(15);
  sProcedimiento    VARCHAR2(500);
  VID_CIRCULO SDB_ACC_TURNO_HISTORIA.ID_CIRCULO_USUARIO%type;
  VMAT_INCONSISTENTES INTEGER;
  VRETORNO NUMBER;
  VMENSAJE VARCHAR2(500);
BEGIN
/*****************************************************************************************************************************************/
-- DIGITALIZACION FIN DE ETAPA 17
  IF UPDATING('ESTADO_ACTIVIDAD') AND :NEW.ID_ETAPA = 17 AND :NEW.ESTADO_ACTIVIDAD = 'TER' AND :OLD.ESTADO_ACTIVIDAD <> 'TER' THEN 
   :NEW.CALIFICACION := 'DIGITALIZADO';
  END IF;
/*****************************************************************************************************************************************/

/*CALCULA LA FECHA DE VENCIMIENTO CUANDO LA ETAPA ENTRA A ESTADO DE ASG O ESP*/
  IF UPDATING('ESTADO_ACTIVIDAD') AND :NEW.ESTADO_ACTIVIDAD IN ('ASG', 'ESP','AUT') THEN
    IF NVL(:NEW.ID_CIRCULO_USUARIO,'NULL') = 'NULL' THEN
        BEGIN
          SELECT ID_CIRCULO INTO VID_CIRCULO
          FROM SDB_ACC_TURNO
          WHERE ID_TURNO = :NEW.ID_TURNO;
          EXCEPTION WHEN OTHERS THEN
            VID_CIRCULO := NULL;
        END; 
      ELSE 
        VID_CIRCULO := :NEW.ID_CIRCULO_USUARIO;
    END IF;  
  END IF;
 :NEW.FECHA_VENCIMIENTO := PKG_WORKFLOW.FUNC_VENCIMIENTO_ETAPA(:NEW.ID_ETAPA,VID_CIRCULO,SYSDATE);
  /********************************************************************************************************************************/
  IF :NEW.ID_ETAPA in (80,310,170,130) and :OLD.ESTADO_ACTIVIDAD = 'XRP' and :NEW.ESTADO_ACTIVIDAD = 'ASG' AND NVL(:NEW.ID_USUARIO,'NULL') <> 'NULL' THEN
    IF :NEW.ID_PROCESO = '6' THEN
        BEGIN
          SELECT COUNT(*)
            INTO VMAT_INCONSISTENTES
            FROM SDB_ACC_SOLICITUD_MATRICULA_ACTO MACT
            INNER JOIN SDB_BNG_PREDIO_REGISTRO PRED ON PRED.ID_CIRCULO = MACT.ID_CIRCULO AND PRED.ID_MATRICULA = MACT.ID_MATRICULA
            WHERE MACT.ID_SOLICITUD = :NEW.ID_SOLICITUD 
             AND MACT.ID_TURNO = :NEW.ID_TURNO
             AND PRED.PREDIO_INCONSISTENTE = 'S';
          EXCEPTION WHEN OTHERS THEN 
            VMAT_INCONSISTENTES := 0;
            PKG_TRANSVERSALES.PROC_BITACORA('TRG_SDB_ACC_TURNO_HIST_INS_AFTER','.SELECT, -10. ERROR VERIFICANDO MATRICULAS INCOSISTENTES PARA ID_TURNO_HISTORIA:'||TO_CHAR(:NEW.ID_TURNO_HISTORIA)||'. '||SQLERRM,NVL(:NEW.ID_USUARIO_CREACION,USER),NVL(:NEW.IP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION()),NULL,NULL,NULL,'SELECT',NULL,NULL,NULL,NULL,NULL,:NEW.ID_SOLICITUD,:NEW.ID_TURNO,:NEW.ID_TURNO_HISTORIA,'TRG_SDB_ACC_TURNO_HIST_INS_AFTER',VRETORNO,VMENSAJE);
        END;
      END IF;
      IF :NEW.ID_PROCESO = '1' THEN
        BEGIN
          SELECT COUNT(*)
            INTO VMAT_INCONSISTENTES
            FROM SDB_ACC_TURNO MAT 
            INNER JOIN SDB_BNG_PREDIO_REGISTRO PRED ON PRED.ID_CIRCULO = MAT.ID_CIRCULO AND PRED.ID_MATRICULA = MAT.ID_MATRICULA_CERTIFICADO
            WHERE MAT.ID_SOLICITUD = :NEW.ID_SOLICITUD 
            AND MAT.ID_TURNO = :NEW.ID_TURNO
            AND PRED.PREDIO_INCONSISTENTE = 'S';
          EXCEPTION WHEN OTHERS THEN 
            VMAT_INCONSISTENTES := 0;
            PKG_TRANSVERSALES.PROC_BITACORA('TRG_SDB_ACC_TURNO_HIST_INS_AFTER','.SELECT, -12. ERROR VERIFICANDO MATRICULAS INCOSISTENTES PARA ID_TURNO_HISTORIA:'||TO_CHAR(:NEW.ID_TURNO_HISTORIA)||'. '||SQLERRM,NVL(:NEW.ID_USUARIO_CREACION,USER),NVL(:NEW.IP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION()),NULL,NULL,NULL,'SELECT',NULL,NULL,NULL,NULL,NULL,:NEW.ID_SOLICITUD,:NEW.ID_TURNO,:NEW.ID_TURNO_HISTORIA,'TRG_SDB_ACC_TURNO_HIST_INS_AFTER',VRETORNO,VMENSAJE);
        END;
      END IF;
      IF :NEW.ID_PROCESO = '3' THEN
        BEGIN
          SELECT COUNT(*)
            INTO VMAT_INCONSISTENTES
            FROM SDB_ACC_SOLICITUD_MATRICULA MACT 
            INNER JOIN SDB_BNG_PREDIO_REGISTRO PRED ON PRED.ID_CIRCULO = MACT.ID_CIRCULO AND PRED.ID_MATRICULA = MACT.ID_MATRICULA
            WHERE MACT.ID_SOLICITUD = :NEW.ID_SOLICITUD 
             AND PRED.PREDIO_INCONSISTENTE = 'S';
          EXCEPTION WHEN OTHERS THEN 
            VMAT_INCONSISTENTES := 0;
            PKG_TRANSVERSALES.PROC_BITACORA('TRG_SDB_ACC_TURNO_HIST_INS_AFTER','.SELECT, -12. ERROR VERIFICANDO MATRICULAS INCOSISTENTES PARA ID_TURNO_HISTORIA:'||TO_CHAR(:NEW.ID_TURNO_HISTORIA)||'. '||SQLERRM,NVL(:NEW.ID_USUARIO_CREACION,USER),NVL(:NEW.IP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION()),NULL,NULL,NULL,'SELECT',NULL,NULL,NULL,NULL,NULL,:NEW.ID_SOLICITUD,:NEW.ID_TURNO,:NEW.ID_TURNO_HISTORIA,'TRG_SDB_ACC_TURNO_HIST_INS_AFTER',VRETORNO,VMENSAJE);
        END;
      END IF;
      IF VMAT_INCONSISTENTES > 0 THEN
        :NEW.ESTADO_ACTIVIDAD := 'TER';
        :NEW.ID_MOTIVO := 85;
        
        BEGIN -- PROC_CREA_ETAPA( PID_TURNO_HISTORIA,PID_USUARIO_ASIGNAR,PID_CIRCULO_ASIGNAR, PN_ID_TURNO_HISTORIA, PN_ID_TURNO_HISTORIA_PARALELA, PMENSAJE );
          sProcedimiento := 'DECLARE PN_ID_TURNO_HISTORIA NUMBER; PN_ID_TURNO_HISTORIA_PARALELA NUMBER; RRETORNO INTEGER; PMENSAJE VARCHAR2(500); ' ||
                            ' BEGIN PKG_WORKFLOW.PROC_CREA_ETAPA('||:NEW.ID_TURNO_HISTORIA ||',NULL,NULL,'''||:NEW.ID_USUARIO||''','''|| :NEW.ID_CIRCULO_USUARIO||''','''||:NEW.ID_USUARIO_CREACION ||''','''||:NEW.IP_CREACION||''',PN_ID_TURNO_HISTORIA,RRETORNO,PMENSAJE); COMMIT; END;';
--DBMS_OUTPUT.PUT_LINE('TRG_SDB_ACC_TURNO_HIST_UPD_BEFORE:'||sProcedimiento);
          dbms_job.submit(job => njob,
                             what => sProcedimiento,
                             next_date => SYSDATE + 1/(24*60*60), -- Lo programa para dentro un segundo
                             interval => NULL); -- Sin repeticion
  
        END;      
      END IF;
  END IF;

/*****************************************************************************************************************************************/
	EXCEPTION WHEN OTHERS THEN
	RAISE VUSER_XCEP;
END TRG_SDB_ACC_TURNO_HIST_INS_BEFORE;
/
ALTER TRIGGER "TRG_SDB_ACC_TURNO_HIST_UPD_BEFORE" ENABLE;
