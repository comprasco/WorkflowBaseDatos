--------------------------------------------------------
--  DDL for Package Body PKG_WORKFLOW
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE PACKAGE BODY "PKG_WORKFLOW" AS 
-----------------------------------------------------------------------------------------------  
PROCEDURE MENSAJES(MENS VARCHAR2) AS 
BEGIN
	--dbms_output.put_line(MENS);
  RETURN;
END;
--------------------------------------------------------------------------------------------------------------------------------
--1 create or replace PROCEDURE "PROC_CREA_ETAPA" 
--------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PROC_CREA_ETAPA  
( PID_HISTORIA            IN NUMBER,
  PID_TURNO               IN VARCHAR2,
  PID_SOLICITUD           IN VARCHAR2,
  PID_USUARIO_ASIGNACION  IN VARCHAR2,
  PID_CIRCULO             IN VARCHAR2,
  PID_USUARIO_ACCION      IN VARCHAR2,
  PIP_ACCION              IN VARCHAR2, 
  PN_ID_TURNO_HISTORIA	  OUT NUMBER,
  PRETORNO		            OUT INTEGER,
	PMENSAJE		            OUT VARCHAR2)
AS

TYPE REG_TH_CERRAR IS RECORD(
AID_CONSECUTIVO          INTEGER
,AID_TURNO_HISTORIA       SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE
,AID_TURNO                SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE
,AID_SOLICITUD            SDB_ACC_TURNO_HISTORIA.ID_SOLICITUD%TYPE
,AID_ETAPA                SDB_ACC_TURNO_HISTORIA.ID_ETAPA%TYPE
,AID_ANTERIOR             SDB_ACC_TURNO_HISTORIA.ID_ANTERIOR%TYPE
);

TYPE TBL_TH_CERRAR IS TABLE OF REG_TH_CERRAR
INDEX BY BINARY_INTEGER;
I                     BINARY_INTEGER;
VARR_TH_CERRAR        TBL_TH_CERRAR;

/*VARIABLES PARA REGISTRO DE LA BITACORA DE PROCESO*/
  VPROCESO                   SDB_ACC_BITACORA_PROCESO.PROCESO%TYPE; 
  VEJECUCION                 SDB_ACC_BITACORA_PROCESO.EJECUCION%TYPE; 
  VDESCRIPCION               SDB_ACC_BITACORA_PROCESO.DESCRIPCION%TYPE;
  VID_USUARIO_INSERCION      SDB_ACC_BITACORA_PROCESO.ID_USUARIO_CREACION%TYPE; 
  VIP_CREACION               SDB_ACC_BITACORA_PROCESO.IP_CREACION%TYPE; 
  VID_USUARIO_MODIFICACION   SDB_ACC_BITACORA_PROCESO.ID_USUARIO_MODIFICACION%TYPE;
  VFECHA_MODIFICACION        SDB_ACC_BITACORA_PROCESO.FECHA_MODIFICACION%TYPE;
  VIP_MODIFICACION           SDB_ACC_BITACORA_PROCESO.IP_MODIFICACION%TYPE := PIP_ACCION;
  VRETORNO                   INTEGER;
  VMENSAJE                   VARCHAR2(500);
  MENSAJE                    VARCHAR2(500);
  PRMER_MENSAJE              VARCHAR2(500);

/*VARIABLES DE TRABAJO*/
  VID_ETAPA_NVA             SDB_ACC_TURNO_HISTORIA.ID_ETAPA%TYPE;
  VID_DOCUMENTO_SALIDA      SDB_ACC_TURNO_HISTORIA.ID_DOCUMENTO_SALIDA%TYPE;  
  VID_ESTADO_ACTIVIDAD_NVA  SDB_ACC_TURNO_HISTORIA.ESTADO_ACTIVIDAD%TYPE;
  VID_PROCESO               SDB_ACC_SUBPROCESO.ID_PROCESO%TYPE;
  VID_SUBPROCESO            SDB_ACC_SUBPROCESO.ID_SUBPROCESO%TYPE;
  VDESCRIPCION_SOL          SDB_ACC_SOLICITUD.DESCRIPCION%TYPE;
  VVERSION                  SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO%TYPE;
  VID_PROCESO_TH            SDB_ACC_SUBPROCESO.ID_PROCESO%TYPE;
  VID_SUBPROCESO_TH         SDB_ACC_SUBPROCESO.ID_SUBPROCESO%TYPE;
  VVERSION_TH               SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO%TYPE;
  VID_ETAPA_ACT             SDB_ACC_TURNO_HISTORIA.ID_ETAPA%TYPE;
  VESTADO_ACTIVIDAD_ACT     SDB_ACC_TURNO_HISTORIA.ESTADO_ACTIVIDAD%TYPE;
  VMOTIVO_ACT               SDB_ACC_TURNO_HISTORIA.ID_MOTIVO%TYPE;
  VID_MOTIVO                SDB_ACC_TURNO_HISTORIA.ID_MOTIVO%TYPE;
  VID_SOLICITUD             SDB_ACC_TURNO_HISTORIA.ID_SOLICITUD%TYPE;
  VID_TURNO_HISTORIA        SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE;
  VID_TURNO                 SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE;
  VID_TURNO_ANT             SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE;
  VMOTIVO                   SDB_ACC_TURNO_HISTORIA.MOTIVO%TYPE;
  VCONTEO                   INTEGER;
  PCREAR                    CHAR(1);
  VINICIA_FLUJO             CHAR(1);
  VULTIMA_VERSION           NUMBER;
  VID_USUARIO_ASIGNACION    SDB_ACC_TURNO_HISTORIA.ID_USUARIO%TYPE := PID_USUARIO_ASIGNACION;
  VID_CIRCULO               SDB_ACC_TURNO_HISTORIA.ID_CIRCULO_USUARIO%TYPE := PID_CIRCULO;
  VTID_MOTIVO               SDB_ACC_TURNO_HISTORIA.ID_MOTIVO%TYPE;
  VTCONTEO                  INTEGER;
-----------------------------------------------------------------------------------------------
PROCEDURE LPROC_REGLAS_NEGOCIO (
  LID_TURNO_HISTORIA    IN NUMBER,
  PLCREAR               OUT VARCHAR2,
  PLRETORNO             OUT NUMBER,
  PLMENSAJE             OUT VARCHAR2
) AS
  CURSOR CurMotivo IS
    SELECT ID_MOTIVO_TRAMITE
    FROM SDB_PGN_MOTIVO_TRAMITE
    where ID_PROCESO = VID_PROCESO
     and ID_SUBPROCESO = VID_SUBPROCESO
     and VERSION_SUBPROCESO = VVERSION
    and ID_ETAPA_ORIGEN = VID_ETAPA_ACT
    and NVL(ID_MOTIVO,0) = NVL(VMOTIVO_ACT,0);
    
PROC_SQL VARCHAR2(4000);
VLMENSAJES VARCHAR2(4000);
VULT_RETORNO INTEGER := 0;
BEGIN
  FOR VREC_MOTIVO IN CurMotivo
  LOOP
--valida todas las reglas de negocio para un id_turno_historia 
    FOR VREC IN (SELECT RN.NOMBRE, RN.NOMBRE_PROCEDIMIENTO
                    FROM SDB_PGN_MOTIVO_TRAMITE_REGLA MRN
                    INNER JOIN SDB_PGN_REGLA_NEGOCIO RN ON MRN.ID_REGLA_NEGOCIO = RN.ID_REGLA_NEGOCIO
                    WHERE MRN.ID_MOTIVO_TRAMITE = VREC_MOTIVO.ID_MOTIVO_TRAMITE
                    AND MRN.ACTIVO = 'S')
    LOOP
      BEGIN
        PROC_SQL := 'BEGIN '||VREC.NOMBRE_PROCEDIMIENTO||'(:LID_HISTORIA, :LRETORNO, :LMENSAJE ); END;' ;
        execute immediate PROC_SQL USING IN LID_TURNO_HISTORIA, OUT PLRETORNO, OUT VMENSAJE ;
        IF PLRETORNO < 0 THEN
          VLMENSAJES := CASE WHEN NVL(VLMENSAJES,'NULL') <> 'NULL' THEN VLMENSAJES||';' ELSE '' END ||VREC.NOMBRE||':'||PLRETORNO||' '||VMENSAJE ;
          VULT_RETORNO := PLRETORNO;
        END IF;
      END;
    END LOOP;
  END LOOP;
  IF VULT_RETORNO < 0 THEN 
      PLRETORNO := VULT_RETORNO;
      PLMENSAJE := VLMENSAJES;
      PLCREAR := 'N';
    ELSE
      PLMENSAJE := '';
      PLCREAR := 'S';
  END IF;
  RETURN;
END LPROC_REGLAS_NEGOCIO;
-----------------------------------------------------------------------------------------------
PROCEDURE LPROC_ATRAS ( 
  LID_TURNO_HISTORIA    IN NUMBER,
  PLCREAR               OUT VARCHAR2,
  PLRETORNO             OUT NUMBER
) AS  
/*SE BUSCAN LOS TH QUE LLEGAN A LA ETAPA QUE SE ESTA EVALUANDO Y CUYO ID SEA ANTERIOR AL EVALUADO*/

/*INICIALIZACION DE VARIABLES DE BITACORA*/
  LPRMER_MENSAJE VARCHAR2(200) := 'ID_TURNO_HISTORIA:'||NVL(TO_CHAR(LID_TURNO_HISTORIA),'NULL');
  LVPROCESO VARCHAR2(200):= 'LPROC_ATRAS';
  LVEJECUCION VARCHAR2(200) := SUBSTR('LPROC_ATRAS('||PRMER_MENSAJE||')',1,500);

CURSOR_RESULTADO SYS_REFCURSOR;

TYPE TYP_REC IS RECORD
    (
      ID_TURNO_HISTORIA       SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE
      ,ID_TURNO               SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE
      ,ID_SOLICITUD           SDB_ACC_TURNO_HISTORIA.ID_SOLICITUD%TYPE
      ,ID_ETAPA               SDB_ACC_TURNO_HISTORIA.ID_ETAPA%TYPE
      ,ID_ANTERIOR            SDB_ACC_TURNO_HISTORIA.ID_ANTERIOR%TYPE
      ,ID_ETAPA_ORIGEN        SDB_PGN_MOTIVO_TRAMITE.ID_ETAPA_ORIGEN%TYPE
      ,ID_ETAPA_POSTERIOR     SDB_PGN_MOTIVO_TRAMITE.ID_ETAPA_POSTERIOR%TYPE
      ,ESTADO_ACTIVIDAD       SDB_PGN_MOTIVO_TRAMITE.ESTADO_ACTIVIDAD%TYPE
      ,INDICADOR_DEVOLUCION   SDB_PGN_MOTIVO_TRAMITE.INDICADOR_DEVOLUCION%TYPE
      ,TIPO_COMPUERTA_LLEGADA SDB_PGN_MOTIVO_TRAMITE.TIPO_COMPUERTA_LLEGADA%TYPE
      ,DECISION_CALIFICACION  SDB_PGN_MOTIVO_TRAMITE.DECISION_CALIFICACION%TYPE
    );
    VREC TYP_REC;
    
/*  CURSOR CurEtapaAtras IS
    SELECT TH.ID_TURNO_HISTORIA 
          ,TH.ID_TURNO 
          ,TH.ID_SOLICITUD 
          ,TH.ID_ETAPA 
          ,TH.ID_ANTERIOR 
          ,MT.ID_ETAPA_ORIGEN
          ,MT.ID_ETAPA_POSTERIOR
          ,MT.ESTADO_ACTIVIDAD
          ,MT.INDICADOR_DEVOLUCION
          ,MT.TIPO_COMPUERTA_LLEGADA
    FROM SDB_ACC_TURNO_HISTORIA TH 
     INNER JOIN SDB_PGN_MOTIVO_TRAMITE MT ON TH.ID_ETAPA = MT.ID_ETAPA_POSTERIOR AND TH.ID_PROCESO = MT.ID_PROCESO AND TH.ID_SUBPROCESO = MT.ID_SUBPROCESO 
                                            AND TH.VERSION_SUBPROCESO = MT.VERSION_SUBPROCESO
    where CASE WHEN IS NULL TH.ID_TURNO = VID_TURNO
      AND TH.ID_TURNO_HISTORIA < LID_TURNO_HISTORIA
      AND TH.ESTADO_ACTIVIDAD <> 'TER';*/
    VSQL                  VARCHAR2(4000);
    VLID_TURNO            SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE;
    VLID_SOLICITUD        SDB_ACC_TURNO_HISTORIA.ID_SOLICITUD%TYPE;
  /*COMPUERTAS*/
    VCP_PARALELA          VARCHAR2(10) := 'PAR'; -- Todas las que vienen deben terminar, la ultima avanza
    VCP_EXCLUYENTE        VARCHAR2(10) := 'EXC'; -- Avanza la primera que llega, las demas solo terminan
    VCP_EXCLUYENTE_TERM   VARCHAR2(10) := 'EXT'; -- La primera que llega avanza la etapa y termina las demas que esten abiertas.
    VPAR                  INTEGER := 0;
    VEXC                  INTEGER := 0;
    VEXT                  INTEGER := 0;
    VABIERTOS             INTEGER := 0;
    VSIN_COMP             INTEGER := 0;
    LLCREAR               VARCHAR2(10);
    LLRETORNO             INTEGER;
  /***********/
BEGIN
  
/*    SELECT TH.ID_TURNO, 
      SUM(CASE WHEN MT.TIPO_COMPUERTA_LLEGADA = VCP_PARALELA THEN 1 ELSE 0 END) PAR, 
      SUM(CASE WHEN MT.TIPO_COMPUERTA_LLEGADA = VCP_EXCLUYENTE THEN 1 ELSE 0 END) EXC, 
      SUM(CASE WHEN MT.TIPO_COMPUERTA_LLEGADA = VCP_EXCLUYENTE_TERM THEN 1 ELSE 0 END) EXT,
      SUM(CASE WHEN MT.TIPO_COMPUERTA_LLEGADA = VCP_PARALELA AND MT.TIPO_COMPUERTA_LLEGADA = VCP_EXCLUYENTE AND  MT.TIPO_COMPUERTA_LLEGADA <> VCP_EXCLUYENTE_TERM THEN 1 ELSE 0 END) SIN_COMP,
      COUNT(*)
      INTO VID_TURNO,VPAR,VEXC,VEXT,VSIN_COMP,VABIERTOS
    FROM SDB_ACC_TURNO_HISTORIA TH 
     INNER JOIN SDB_PGN_MOTIVO_TRAMITE MT ON TH.ID_ETAPA = MT.ID_ETAPA_POSTERIOR 
                                            AND TH.ID_PROCESO = MT.ID_PROCESO 
                                            AND TH.ID_SUBPROCESO = MT.ID_SUBPROCESO 
                                            AND TH.VERSION = MT.VERSION
    where TH.ID_SOLICITUD = PID_SOLICITUD
    AND TH.ID_TURNO = VID_TURNO
    AND TH.ESTADO_ACTIVIDAD <> 'TER';*/
    
  PLCREAR := 'S';
  PLRETORNO := 0;
  I := 0;
  BEGIN
    SELECT ID_TURNO, ID_SOLICITUD 
    INTO VLID_TURNO, VLID_SOLICITUD
    FROM SDB_ACC_TURNO_HISTORIA
    WHERE SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA = LID_TURNO_HISTORIA;
    EXCEPTION WHEN NO_DATA_FOUND THEN
        PLCREAR := 'N';
        PLRETORNO := -1;
        RETURN;
      WHEN OTHERS THEN
        PLCREAR := 'N';
        PLRETORNO := -1;
        RETURN;
  END ; 
  IF NVL(VID_PROCESO,'NULL') = 'NULL' OR NVL(VID_SUBPROCESO,'NULL') = 'NULL' OR NVL(VVERSION,0) = 0 THEN
          PLRETORNO := -5;
          MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.CALL. '|| TO_CHAR(PLRETORNO) || '. ERROR PROCESO,SUBPROCESO O VERSION VACIO: PROCESO:'||VID_PROCESO||', SUBPROCESO:'||VID_SUBPROCESO||', VERSION:'||VVERSION|| ', VMENSAJE:'||VMENSAJE||').',1,500);
          PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,LID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
          PMENSAJE := SUBSTR(MENSAJE,1,500);
					RETURN;
  END IF;
   VSQL := 'SELECT TH.ID_TURNO_HISTORIA ,TH.ID_TURNO ,TH.ID_SOLICITUD ,TH.ID_ETAPA ,TH.ID_ANTERIOR ,MT.ID_ETAPA_ORIGEN ,MT.ID_ETAPA_POSTERIOR,MT.ESTADO_ACTIVIDAD, '||
            'MT.INDICADOR_DEVOLUCION, MT.TIPO_COMPUERTA_LLEGADA, MT.DECISION_CALIFICACION FROM SDB_ACC_TURNO_HISTORIA TH '||
            'INNER JOIN SDB_PGN_MOTIVO_TRAMITE MT ON TH.ID_ETAPA = MT.ID_ETAPA_POSTERIOR AND TH.ID_PROCESO = MT.ID_PROCESO AND TH.ID_SUBPROCESO = MT.ID_SUBPROCESO '||
            'AND TH.VERSION_SUBPROCESO = MT.VERSION_SUBPROCESO ' ||
            'where TH.ID_TURNO_HISTORIA <> '||TO_CHAR(LID_TURNO_HISTORIA) ||
            ' AND TH.ESTADO_ACTIVIDAD <> ''TER'''||
            CASE WHEN NVL(VID_TURNO,'NULL') <> 'NULL' THEN  ' AND TH.ID_TURNO = '''||VID_TURNO||''''
                ELSE CASE WHEN NVL(VID_SOLICITUD,'NULL') <> 'NULL' THEN ' AND TH.ID_SOLICITUD = '''||VID_SOLICITUD||'''' ELSE 'AND 1<2' END END ||
            ' AND TH.ID_ETAPA = '|| TO_CHAR(VID_ETAPA_ACT) ||
            ' AND TH.ID_PROCESO = '''|| VID_PROCESO||''''||
            ' AND TH.ID_SUBPROCESO = '''|| VID_SUBPROCESO|| ''''||
            ' AND TH.VERSION_SUBPROCESO = '|| TO_CHAR(VVERSION);
--PKG_WORKFLOW.MENSAJES(VSQL);
    CURSOR_RESULTADO := PKG_TRANSVERSALES.FUNC_CURSOR_DINAMICO(VSQL);
    LOOP
      FETCH CURSOR_RESULTADO INTO VREC;
      /*IF CURSOR_RESULTADO%NOTFOUND OR CURSOR_RESULTADO%ROWCOUNT = 0 AND VID_ETAPA_ACT <> 10 THEN 
          MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT.'|| TO_CHAR(PLRETORNO) || '.NO SE ENCONTRO FLUJO PARA:TURNO_HISTORIA:'||TO_CHAR(LID_TURNO_HISTORIA)||',PROCESO:'||VID_PROCESO||',SUBPROCESO:'||VID_SUBPROCESO||',VERSION:'||TO_CHAR(VVERSION)||',ID_ETAPA_ORIGEN:'||TO_CHAR(VID_ETAPA_ACT)||'.',1,450);
          PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,LID_TURNO_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
      END IF;*/
      EXIT WHEN CURSOR_RESULTADO%NOTFOUND;
      VCONTEO := CURSOR_RESULTADO%ROWCOUNT;
      
-- 	FOR VREC IN CurEtapaAtras
--	LOOP
--PKG_WORKFLOW.MENSAJES('ENTRO A LOOPCurEtapaAtras'||VCONTEO);
      IF VREC.TIPO_COMPUERTA_LLEGADA = VCP_PARALELA THEN 
         PLCREAR := 'N'; -- SI ENCUENTRA ETAPA DE LLEGADA CON COMPUERTA PARALELA MAYOR A CERO, DEBE ESPERAR PARA QUE PUEDA CERRAR LA ACTUAL. 
        -- PKG_WORKFLOW.MENSAJES('ETAPA ANTERIOR CON COMPUERTA PARALELA SIN TERMINAR, ID_TURNO_HISTORIA:'||TO_CHAR(PID_HISTORIA));
         EXIT WHEN PLCREAR = 'N';
        ELSE
         PLCREAR := 'S';
      END IF;
      IF VREC.TIPO_COMPUERTA_LLEGADA = VCP_EXCLUYENTE_TERM AND PLCREAR = 'S' THEN
        LPROC_ATRAS ( LID_TURNO_HISTORIA, LLCREAR, LLRETORNO);
        IF LLCREAR = 'N' THEN 
           PLCREAR := 'N'; -- SI ENCUENTRA ETAPA DE LLEGADA CON COMPUERTA PARALELA MAYOR A CERO, DEBE ESPERAR PARA QUE PUEDA CERRAR LA ACTUAL. 
          -- PKG_WORKFLOW.MENSAJES('ETAPA ANTERIOR CON COMPUERTA PARALELA SIN TERMINAR, ID_TURNO_HISTORIA:'||TO_CHAR(PID_HISTORIA));
           EXIT WHEN PLCREAR = 'N';
          ELSE 
            PLCREAR := 'S';
        END IF;
      END IF;
      IF PLCREAR = 'S' THEN
        I := I + 1; --I := NVL(VARR_TH_CERRAR.LAST(),0) + 1;
        VARR_TH_CERRAR(I).AID_CONSECUTIVO       := I;
        VARR_TH_CERRAR(I).AID_TURNO_HISTORIA    := VREC.ID_TURNO_HISTORIA;
        VARR_TH_CERRAR(I).AID_TURNO             := VREC.ID_TURNO;
        VARR_TH_CERRAR(I).AID_SOLICITUD         := VREC.ID_SOLICITUD;
        VARR_TH_CERRAR(I).AID_ETAPA             := VREC.ID_ETAPA;
        VARR_TH_CERRAR(I).AID_ANTERIOR          := VREC.ID_ANTERIOR;
      END IF;
      IF VREC.TIPO_COMPUERTA_LLEGADA = VCP_EXCLUYENTE AND PLCREAR = 'S' THEN
        PLCREAR := 'S';
      END IF;
  END LOOP;
--  PKG_WORKFLOW.MENSAJES('SALE DE LPROC_ATRAS:'||PLCREAR||','||PLRETORNO);
END LPROC_ATRAS;
-----------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Procesos adicionales despues de crear cada turno historia
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE LPROC_REPARTO_ADICIONALES (
  PLID_TURNO_HISTORIA   IN NUMBER,
  PESTADO_ACTIVIDAD     IN VARCHAR2, -- SDB_ACC_TURNO_HISTORIA.ESTADO_ACTIVIDAD%TYPE := 'XRP';
  PID_ETAPA_POSTERIOR   IN VARCHAR2, -- SDB_ACC_TURNO_HISTORIA.ID_ETAPA%TYPE ;
  PID_TURNO             IN VARCHAR2, -- SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE ; --vrec.ID_TURNO
  PID_SOLICITUD         IN VARCHAR2, -- SDB_ACC_TURNO_HISTORIA.ID_SOLICITUD%TYPE; --VREC.ID_SOLICITUD
  PID_PROCESO           IN VARCHAR2, -- SDB_ACC_TURNO_HISTORIA.ID_PROCESO%TYPE; --VREC.ID_PROCESO
  PID_MOTIVO            IN VARCHAR2, -- SDB_ACC_TURNO_HISTORIA.ID_MOTIVO%TYPE; --VREC.ID_MOTIVO
  PLRETORNO             OUT NUMBER
) AS  
/* 20200609
1. Modificar insert de tua para incluir las siguientes funcionalidades: 
1.1. Cuando se inserta una etapa 504, 505 Validar el Subproceso --> Si  es proceso 37  Subproceso 3
1.2. Terminar  la etapa 504 0  505
1.3. Bscar el turno derivado con proceso  3 (CORRECIONES)
1.4. Del turno  deriivad de correcciones buscar la maxima etapa 103 BLQ
1.5. Terminar la etaa 103 BLQ con id_motivo = 10 
1.6. Invocar proc crea etapa
*/
  LPRMER_MENSAJE VARCHAR2(200) := 'ID_TURNO_HISTORIA:'||NVL(TO_CHAR(PLID_TURNO_HISTORIA),'NULL')||',ESTADO_ACTIVIDAD:'||PESTADO_ACTIVIDAD||',ID_ETAPA_POSTERIOR:'||PID_ETAPA_POSTERIOR||
  ',ID_TURNO:'||PID_TURNO||',ID_SOLICITUD:'||PID_SOLICITUD||',ID_PROCESO:'||PID_PROCESO||',ID_MOTIVO:'||PID_MOTIVO;
  LVPROCESO VARCHAR2(200):= 'PROC_CREA_ETAPA:LPROC_REPARTO_ADICIONALES';
  LVEJECUCION VARCHAR2(200) := SUBSTR('LPROC_REPARTO_ADICIONALES('||PRMER_MENSAJE||')',1,500);
  
  VID_TURNO_HIJO_H      SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE ;    --vrec.ID_TURNO_HIJO_H 
  VINDICADOR_VINCULADO  CHAR(1); --VREC.INDICADOR_VINCULADO
  VPRETORNOOUT          INTEGER;
  VCONTEO_38            INTEGER := 0;
BEGIN
--PKG_WORKFLOW.MENSAJES('PROC_CREA_ETAPA INGRESA A: LPROC_REPARTO_ADICIONALES');
/*  PKG_WORKFLOW.MENSAJES('PLID_TURNO_HISTORIA:'||PLID_TURNO_HISTORIA||','||
  'PESTADO_ACTIVIDAD:'||PESTADO_ACTIVIDAD||','||
  'PID_ETAPA_POSTERIOR:'||PID_ETAPA_POSTERIOR||','||
  'PID_TURNO:'||PID_TURNO||','||
  'PID_SOLICITUD:'||PID_SOLICITUD||','||
  'PID_PROCESO:'||PID_PROCESO||','||
  'PID_MOTIVO:'||PID_MOTIVO);*/
/*Si es un turno vinculado con indicador 'S' y es hijo se asigna al usuario que tiene el padre */
  BEGIN
    SELECT ID_TURNO_HIJO,INDICADOR_VINCULADO
    INTO VID_TURNO_HIJO_H, VINDICADOR_VINCULADO
    FROM SDB_ACC_TURNO_DERIVADO HIJO 
    WHERE HIJO.ID_TURNO_HIJO = PID_TURNO AND HIJO.INDICADOR_VINCULADO = 'S';
    EXCEPTION WHEN OTHERS THEN
      VID_TURNO_HIJO_H := NULL;
      VINDICADOR_VINCULADO := NULL;
  END;
    IF PID_ETAPA_POSTERIOR = 650 AND PID_PROCESO = '38' THEN
      BEGIN
        SELECT COUNT(*) INTO VCONTEO_38
          FROM SDB_BNG_PREDIO_REGISTRO PR
          INNER JOIN SDB_ACC_TRASLADO_MATRICULA TR ON PR.ID_CIRCULO = TR.ID_CIRCULO_ORIGEN AND PR.ID_MATRICULA = TR.ID_MATRICULA_ORIGEN
          WHERE TR.ID_TURNO = PID_TURNO AND NVL(PR.TURNO_BLOQUEO,'NULL') <> 'NULL' AND NVL(PR.TURNO_BLOQUEO,'NULL') <> TR.ID_TURNO;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              VCONTEO_38 := 0;
            WHEN OTHERS THEN
              PN_ID_TURNO_HISTORIA := -87;
              PLRETORNO := -87;
              MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || 'ERROR CONSULTANDO MATRICULAS BLOQUEADAS PARA ID_ETAPA: '||TO_CHAR(PID_ETAPA_POSTERIOR)||' Y ID_PROCESO: '||PID_PROCESO||'.' || SQLERRM,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,200);
              RETURN;          
      END;
    END IF;
 
    IF VCONTEO_38 = 0 THEN
			IF (PESTADO_ACTIVIDAD = 'XRP') OR (PID_TURNO = VID_TURNO_HIJO_H AND NVL(VINDICADOR_VINCULADO,'N') = 'S') THEN
--PKG_WORKFLOW.MENSAJES('PROC_CREAR_ETAPA: ENVIA A REPARTO: VCONTEO_38 = '||VCONTEO_38||','||VID_USUARIO_ASIGNACION||','||VID_CIRCULO);    
				PKG_REGISTRO.PROC_REPARTO (PLID_TURNO_HISTORIA,VID_USUARIO_ASIGNACION,VID_CIRCULO,PID_USUARIO_ACCION,PIP_ACCION,VPRETORNOOUT,VMENSAJE);
--PKG_WORKFLOW.MENSAJES('PROC_CREAR_ETAPA: regresa de REPARTO: VPRETORNOOUT = '||VPRETORNOOUT||','||VMENSAJE);          
				IF VPRETORNOOUT < 0 THEN
					--PLID_TURNO_HISTORIA := PLID_TURNO_HISTORIA;
          PLRETORNO := -55;
          MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.CALL. '|| TO_CHAR(PLRETORNO) || '. ERROR EN PROCESO: PROC_REPARTO( VID_TURNO_HISTORIA: '||TO_CHAR(PLID_TURNO_HISTORIA)||', RET: '|| TO_CHAR(VPRETORNOOUT)|| ', VMENSAJE:'||VMENSAJE||').',1,500);
          PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,VID_USUARIO_ASIGNACION,VID_CIRCULO,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
          PMENSAJE := SUBSTR('ERROR EN REPARTO: '||VMENSAJE,1,500);
--					RETURN;
          ELSE
          IF VPRETORNOOUT > 0 THEN
           MENSAJE := SUBSTR(PRMER_MENSAJE ||'.CALL. '|| TO_CHAR(PLRETORNO) || '. ADVERTENCIA: PROC_REPARTO( VID_TURNO_HISTORIA: '||TO_CHAR(PLID_TURNO_HISTORIA)||', RET: '|| TO_CHAR(VPRETORNOOUT)|| ', VMENSAJE:'||VMENSAJE||').',1,500);
          END IF;
				END IF;
			END IF;
    END IF;
/*EVALUA ETAPA 507 Y 509 */
--PKG_WORKFLOW.MENSAJES('PROC_CREAR_ETAPA-LPROC_REPARTO_ADICIONALES: EVALUA (415,460,504,505,507,509,650), ETAPA ACTUAL: '||VID_ETAPA_ACT||',ETAPA POSTERIOR: '||  PID_ETAPA_POSTERIOR ||','||PESTADO_ACTIVIDAD );
    IF PID_ETAPA_POSTERIOR IN (415,460,504,505,507,509,650) THEN 
      DECLARE LID_MOTIVO          SDB_ACC_TURNO_HISTORIA.ID_MOTIVO%TYPE;
              LID_SOL_M           SDB_ACC_SOLICITUD.ID_SOLICITUD%TYPE;
              LID_PROCESO_M       SDB_ACC_SOLICITUD.ID_PROCESO%TYPE;
              LID_CALIDAD_SOLICITANTE SDB_ACC_SOLICITUD.ID_CALIDAD_SOLICITANTE%TYPE;
              LID_TH_M            SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE;
              LID_ETAPA_M         SDB_ACC_TURNO_HISTORIA.ID_ETAPA%TYPE;
              LESTADO_ACTIVIDAD_M SDB_ACC_TURNO_HISTORIA.ESTADO_ACTIVIDAD%TYPE;
              LID_TURNO_HISTORIA  SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE;
              LOBSERVACION        SDB_ACC_TURNO_HISTORIA.OBSERVACIONES%TYPE := NULL;
              LFECHA_SOLICITUD    SDB_ACC_SOLICITUD.FECHA_SOLICITUD%TYPE;
      BEGIN
        IF PID_ETAPA_POSTERIOR IN (415,460) and VID_ETAPA_ACT not in (405,406) THEN
          BEGIN
            SELECT ASO.ID_SOLICITUD1, SOL_ASO.ID_PROCESO, SOL_ASO.ID_CALIDAD_SOLICITANTE, SOL_ASO.FECHA_SOLICITUD
              INTO LID_SOL_M, LID_PROCESO_M, LID_CALIDAD_SOLICITANTE, LFECHA_SOLICITUD
            FROM SDB_ACC_SOLICITUD_ASOCIADA ASO
            INNER JOIN SDB_ACC_SOLICITUD SOL_ASO ON ASO.ID_SOLICITUD1 = SOL_ASO.ID_SOLICITUD
            WHERE ASO.ID_SOLICITUD = VID_SOLICITUD
            AND SOL_ASO.ID_PROCESO IN ('47','48')
            ORDER BY SOL_ASO.FECHA_SOLICITUD DESC
            FETCH FIRST 1 ROWS ONLY;
              IF LID_CALIDAD_SOLICITANTE = '6' THEN
                  LID_TURNO_HISTORIA := PLID_TURNO_HISTORIA;
                  LID_MOTIVO := CASE LID_PROCESO_M WHEN '47' THEN 80 WHEN '48' THEN 100 ELSE NULL END;
                  LOBSERVACION := 'AGENTE OFICIOSO.';
                ELSE
                  PLRETORNO := 0;
                  RETURN;
              END IF;
            EXCEPTION WHEN NO_DATA_FOUND THEN
              PLRETORNO := 0;
              RETURN;
            WHEN OTHERS THEN
              PN_ID_TURNO_HISTORIA := -98;
              PLRETORNO := -84;
              MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || 'NO SE ENCUENTRAN REGISTROS EN EN SOLICITUD ASOCIADA PARA ID_ETAPA: '||TO_CHAR(PID_ETAPA_POSTERIOR)||' Y ID_MOTIVO: '||TO_CHAR(VID_MOTIVO) || SQLERRM,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,200);
              RETURN;
          END;
--        ELSE
--          RETURN;
        END IF;
        IF PID_ETAPA_POSTERIOR = 509 AND PESTADO_ACTIVIDAD = 'AUT' THEN
          LID_TURNO_HISTORIA := PLID_TURNO_HISTORIA;
          LID_MOTIVO := CASE WHEN PID_PROCESO = '6' THEN 10 ELSE NULL END;
--PKG_WORKFLOW.MENSAJES('PROC_ETAPA:LID_TURNO_HISTORIA:'||LID_TURNO_HISTORIA||', ETAPA POSTERIOR: '||  PID_ETAPA_POSTERIOR ||',PESTADO_ACTIVIDAD:'||PESTADO_ACTIVIDAD||',PID_PROCESO'||PID_PROCESO||',VID_PROCESO'||VID_PROCESO );          
        END IF;
        IF PID_ETAPA_POSTERIOR = 650 THEN
          IF VCONTEO_38 > 0 THEN
--PKG_WORKFLOW.MENSAJES('PROC_CREAR_ETAPA: CREAR 645: VCONTEO_38 = '||VCONTEO_38);            
            LID_TURNO_HISTORIA := PLID_TURNO_HISTORIA;
            LID_MOTIVO := 50;
            LOBSERVACION := 'LA(S) MATRICULA(S) OBJETO DE TRASLADO TIENEN TURNOS EN TRAMITE. EL TURNO DE TRASLADO TRAMITARA UNA VEZ FINALICEN.';
            ELSE
              PLRETORNO := 0;
              RETURN;
            END IF;
        END IF;
        IF PID_ETAPA_POSTERIOR in (504,505,507) THEN
          IF PID_ETAPA_POSTERIOR = 507 THEN 
          --GRABACION ENVIA A CORRECCION y REGISTRO ENVIA A CORRECCION
          --37,1  GRABACION o 6,1   REGISTRO  hija  ID_SOLICITUD1;  3,2   CORRECCION padre SOLICITUD     ID_TURNO_ANT != NULL
          -- LA CORRECCION PASA A 507 Y LA GRABACION PASO CON ID_MOTIVO 110 O REGISTRO PASA CON ID_MOTIVO 100
          --FINALIZA CORRECCION Y DESBLOQUEA MATRICULAS.
            BEGIN
--PKG_WORKFLOW.MENSAJES('PROC_CREA_ETAPA --> PKG_REGISTRO.PROC_DESBLOQUEO_MATRICULAS:'||VID_TURNO||','|| VID_USUARIO_MODIFICACION||','||VIP_MODIFICACION);            
              PKG_REGISTRO.PROC_DESBLOQUEO_MATRICULAS(
                PID_TURNO => VID_TURNO,
                PID_USUARIO_ACCION => VID_USUARIO_MODIFICACION,
                PIP_ACCION => VIP_MODIFICACION,
                PRETORNO => VRETORNO,
                PMENSAJE => VMENSAJE
              );
              IF VPRETORNOOUT < 0 THEN
                --PLID_TURNO_HISTORIA := PLID_TURNO_HISTORIA;
                PLRETORNO := -81;
                MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.CALL. '|| TO_CHAR(PLRETORNO) || '. ERROR EN PROCESO:EN ETAPA 507 PROC_DESBLOQUEO_MATRICULAS( VID_TURNO: '||TO_CHAR(VID_TURNO)||', RET: '|| TO_CHAR(VPRETORNOOUT)|| ', VMENSAJE:'||VMENSAJE||').',1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,VID_USUARIO_ASIGNACION,VID_CIRCULO,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR('ERROR EN PROC_DESBLOQUEO_MATRICULAS: '||VMENSAJE,1,500);
              END IF;
            END;
            BEGIN 
              SELECT SOLASA.ID_SOLICITUD, SOLASA.ID_PROCESO, ID_TH, ID_ETAPA, ESTADO_ACTIVIDAD
              INTO LID_SOL_M, LID_PROCESO_M, LID_TH_M, LID_ETAPA_M, LESTADO_ACTIVIDAD_M
              FROM SDB_ACC_SOLICITUD_ASOCIADA ASA
              INNER JOIN SDB_ACC_SOLICITUD SOL ON ASA.ID_SOLICITUD = SOL.ID_SOLICITUD
              INNER JOIN SDB_ACC_SOLICITUD SOLASA ON ASA.ID_SOLICITUD1 = SOLASA.ID_SOLICITUD
              LEFT JOIN (SELECT ID_TURNO, MAX(ID_TURNO_HISTORIA) ID_TH FROM SDB_ACC_TURNO_HISTORIA GROUP BY ID_TURNO ) TH ON SOL.ID_TURNO_ANT = TH.ID_TURNO
              LEFT JOIN SDB_ACC_TURNO_HISTORIA ON  TH.ID_TH = SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA
              WHERE ASA.ID_SOLICITUD = VID_SOLICITUD;
                EXCEPTION WHEN NO_DATA_FOUND THEN
                  PN_ID_TURNO_HISTORIA := -82;
                  PLRETORNO := -82;
                  MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || 'NO SE ENCUENTRAN REGISTROS EN SOLICITUD ASOCIADA PARA ID_ETAPA: '||TO_CHAR(PID_ETAPA_POSTERIOR)||','||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,200);
                  RETURN;
                WHEN OTHERS THEN
                  PN_ID_TURNO_HISTORIA := -84;
                  PLRETORNO := -84;
                  MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || 'NO SE ENCUENTRAN REGISTROS EN EN SOLICITUD ASOCIADA PARA ID_ETAPA: '||TO_CHAR(PID_ETAPA_POSTERIOR)||' Y ID_MOTIVO: '||TO_CHAR(VID_MOTIVO) || SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,200);
                  RETURN;
            END;
          ELSE 
          --CORRECCION ENVIA A GRABACION
          --3,1   CORRECCION  padre SOLICITUD; 37,3  GRABACION   hija  SOLICITUD1 id_turno_ant != NULL 
          --GRABACION AVANZA A 504 o 505 ENTONCES CORRECCION AVANZA CON ID_MOTIVO 10
            BEGIN 
              SELECT SOL.ID_SOLICITUD, SOL.ID_PROCESO, ID_TH, ID_ETAPA, ESTADO_ACTIVIDAD
                INTO LID_SOL_M, LID_PROCESO_M, LID_TH_M, LID_ETAPA_M, LESTADO_ACTIVIDAD_M
                FROM SDB_ACC_SOLICITUD_ASOCIADA ASA
                INNER JOIN SDB_ACC_SOLICITUD SOL ON ASA.ID_SOLICITUD = SOL.ID_SOLICITUD
                INNER JOIN SDB_ACC_SOLICITUD SOLASA ON ASA.ID_SOLICITUD1 = SOLASA.ID_SOLICITUD
                LEFT JOIN (SELECT ID_TURNO, MAX(ID_TURNO_HISTORIA) ID_TH FROM SDB_ACC_TURNO_HISTORIA GROUP BY ID_TURNO ) TH ON SOLASA.ID_TURNO_ANT = TH.ID_TURNO
                LEFT JOIN SDB_ACC_TURNO_HISTORIA ON  TH.ID_TH = SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA
                WHERE ASA.ID_SOLICITUD1 = VID_SOLICITUD;
                EXCEPTION WHEN NO_DATA_FOUND THEN
                  PN_ID_TURNO_HISTORIA := -82;
                  PLRETORNO := -82;
                  MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || 'NO SE ENCUENTRAN REGISTROS EN SOLICITUD ASOCIADA PARA ID_ETAPA: '||TO_CHAR(PID_ETAPA_POSTERIOR)||','||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,200);
                  RETURN;
                WHEN OTHERS THEN
                  PN_ID_TURNO_HISTORIA := -84;
                  PLRETORNO := -84;
                  MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || 'NO SE ENCUENTRAN REGISTROS EN EN SOLICITUD ASOCIADA PARA ID_ETAPA: '||TO_CHAR(PID_ETAPA_POSTERIOR)||' Y ID_MOTIVO: '||TO_CHAR(VID_MOTIVO) || SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,200);
                  RETURN;
            END;
          END IF;
          LID_TURNO_HISTORIA :=  CASE WHEN PID_ETAPA_POSTERIOR = 507 and NVL(LID_TH_M,0) > 0 AND nvl(LID_ETAPA_M,0) = 130 AND LESTADO_ACTIVIDAD_M in ('BLQ','ASG') THEN LID_TH_M 
                                      WHEN PID_ETAPA_POSTERIOR IN (504,505) and  NVL(LID_TH_M,0) > 0 AND nvl(LID_ETAPA_M,0) = 103 AND LESTADO_ACTIVIDAD_M = 'BLQ' THEN LID_TH_M 
                                      ELSE CASE WHEN PID_ETAPA_POSTERIOR = 507 THEN PKG_REGISTRO.FUNC_ULTIMO_THIST_ETAPA(LID_TH_M,130)
                                                WHEN PID_ETAPA_POSTERIOR IN (504,505) THEN PKG_REGISTRO.FUNC_ULTIMO_THIST_ETAPA(LID_TH_M,103)
                                                ELSE NULL
                                            END
                                      END;
          LID_MOTIVO := CASE WHEN PID_ETAPA_POSTERIOR = 507 and LID_PROCESO_M = '6' THEN 100 
                             WHEN PID_ETAPA_POSTERIOR = 507 and LID_PROCESO_M = '37' THEN 110
                             WHEN PID_ETAPA_POSTERIOR IN (504,505) and LID_PROCESO_M = '3' THEN 10
                             ELSE NULL END;
--PKG_WORKFLOW.MENSAJES('LID_SOL_M:'||LID_SOL_M||',LID_PROCESO_M:'||LID_PROCESO_M||',LID_TH_M:'||LID_TH_M||',LID_ETAPA_M:'||LID_ETAPA_M||',LESTADO_ACTIVIDAD_M:'||LESTADO_ACTIVIDAD_M||',LID_TURNO_HISTORIA:'||LID_TURNO_HISTORIA||',LID_MOTIVO:'||LID_MOTIVO);
          BEGIN
              UPDATE SDB_ACC_TURNO_HISTORIA
              SET ESTADO_ACTIVIDAD = 'TER'
              , FECHA_FINAL = SYSDATE
              , ID_MOTIVO = LID_MOTIVO
              WHERE ID_TURNO_HISTORIA = LID_TURNO_HISTORIA;
              EXCEPTION WHEN OTHERS THEN
                PLRETORNO := -80;
                MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PLRETORNO) || ', ERROR ACTUALIZANDO SDB_ACC_TURNO_HISTORIA PARA ID_ETAPA POSTERIOR: AUT DEL TURNO 507: '|| TO_CHAR(LID_TURNO_HISTORIA) || SQLERRM,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_TURNO_HISTORIA',LID_TURNO_HISTORIA,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,200);
                RETURN;              
          END;                      
          LID_MOTIVO := NULL;
        END IF;
--PKG_WORKFLOW.MENSAJES(PID_ETAPA_POSTERIOR||' ETAPAPOSTERIOR id_turno_historia: '||VID_PROCESO||','||  to_char(PLID_TURNO_HISTORIA) ||','||LID_MOTIVO );
            BEGIN
                UPDATE SDB_ACC_TURNO_HISTORIA
                SET ESTADO_ACTIVIDAD = 'TER'
                , FECHA_FINAL = SYSDATE
                , ID_MOTIVO = LID_MOTIVO
                , OBSERVACIONES = NVL(OBSERVACIONES,'') || NVL(LOBSERVACION,'')
                WHERE ID_TURNO_HISTORIA = PLID_TURNO_HISTORIA;
                EXCEPTION WHEN OTHERS THEN
                  PN_ID_TURNO_HISTORIA := -90;
                  PLRETORNO := -90;
                  MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PLRETORNO) || ', ERROR ACTUALIZANDO SDB_ACC_TURNO_HISTORIA PARA ID_ETAPA POSTERIOR: AUT DEL TURNO 509: '|| TO_CHAR(PLID_TURNO_HISTORIA) || SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_TURNO_HISTORIA',PLID_TURNO_HISTORIA,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,200);
                  RETURN;              
            END;
            DECLARE
                LN_ID_TURNO_HISTORIA NUMBER;
                LN_ID_TURNO_HISTORIA_PARALELA NUMBER;--- NO EXISTE
                LRETORNO NUMBER;
                LMENSAJE VARCHAR2(500);
-- CREA LA ETAPA POSTERIOR A LA 507 o 509; PARA LA 507 REACTIVA LA ETAPA PARA EL TURNO CORREGIDO (CORRECCION INTERNA)
              BEGIN

--PKG_WORKFLOW.MENSAJES('------crear ETAPA id_turno_historia: '||  to_char(LID_TURNO_HISTORIA) ||','||PESTADO_ACTIVIDAD );
                PROC_CREA_ETAPA(LID_TURNO_HISTORIA, NULL, NULL, VID_USUARIO_ASIGNACION, VID_CIRCULO,VID_USUARIO_INSERCION,VIP_CREACION,LN_ID_TURNO_HISTORIA,LRETORNO,LMENSAJE);
--PKG_WORKFLOW.MENSAJES('------regreso crear etapa id_turno_historia nvo: '||  to_char(LN_ID_TURNO_HISTORIA) ||','||to_char(LRETORNO) );                
                IF LRETORNO < 0 THEN
                  PN_ID_TURNO_HISTORIA := LN_ID_TURNO_HISTORIA;
                  PLRETORNO := -95;
                  MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.CALL. '|| TO_CHAR(PLRETORNO) || '. ERROR EN PROCESO: PROC_REPARTO( VID_TURNO_HISTORIA: '||TO_CHAR(PLID_TURNO_HISTORIA)||', RET: '|| TO_CHAR(LRETORNO)|| ', VMENSAJE:'||VMENSAJE||').',1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(LVPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,VID_TURNO,PLID_TURNO_HISTORIA,LVEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR('ERROR EN REPARTO: '||VMENSAJE,1,500);
                  RETURN;
                  ELSE
                  IF LRETORNO > 0 THEN
                   MENSAJE := SUBSTR(LPRMER_MENSAJE ||'.CALL. '|| TO_CHAR(PLRETORNO) || '. ADVERTENCIA: PROC_REPARTO( VID_TURNO_HISTORIA: '||TO_CHAR(PLID_TURNO_HISTORIA)||', RET: '|| TO_CHAR(VPRETORNOOUT)|| ', VMENSAJE:'||VMENSAJE||').',1,500);
                   ELSE 
                    PN_ID_TURNO_HISTORIA := LN_ID_TURNO_HISTORIA;
                  END IF;
                END IF;
              END;
        END;
    END IF;
/*FIN EVALUA ETAPA 507 Y 509 */
END LPROC_REPARTO_ADICIONALES;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------
PROCEDURE LPROC_CREA_ETAPAS (
  PLID_TURNO_HISTORIA   IN NUMBER,
  PLCREAR               OUT VARCHAR2,
  PLRETORNO             OUT NUMBER
) AS  
  CURSOR CurEtapaAdelante IS
    SELECT ID_MOTIVO_TRAMITE
      ,ID_ETAPA_ORIGEN
      ,ID_ETAPA_POSTERIOR
      ,ESTADO_ACTIVIDAD
      ,INDICADOR_DEVOLUCION
      ,TIPO_COMPUERTA_LLEGADA
      ,DECISION_CALIFICACION
      ,DESCRIPCION
    FROM SDB_PGN_MOTIVO_TRAMITE
    where ID_PROCESO = VID_PROCESO
     and ID_SUBPROCESO = VID_SUBPROCESO
     and VERSION_SUBPROCESO = VVERSION
    and ID_ETAPA_ORIGEN = VID_ETAPA_ACT
    and NVL(ID_MOTIVO,0) = NVL(VMOTIVO_ACT,0);
    
    LID_TURNO_HISTORIA SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE;
    VTH_ANT SDB_ACC_TURNO_HISTORIA.ID_TURNO_HISTORIA%TYPE := PLID_TURNO_HISTORIA;
    VPARALELAS INTEGER;
    LINSERTADOS INTEGER := 0;
    VSQL VARCHAR2(4000);
    VID_USUARIO         SDB_ACC_TURNO_HISTORIA.ID_USUARIO%type := PID_USUARIO_ASIGNACION;
    VID_CIRCULO_USUARIO SDB_ACC_TURNO_HISTORIA.ID_CIRCULO_USUARIO%type := PID_CIRCULO;

    VCONTEOTH INTEGER := 0;
    LID_MOTIVO_TRAMITE      SDB_PGN_MOTIVO_TRAMITE.ID_MOTIVO_TRAMITE%TYPE;
    LID_ETAPA_ORIGEN        SDB_PGN_MOTIVO_TRAMITE.ID_ETAPA_ORIGEN%TYPE;  
    LID_ETAPA_POSTERIOR     SDB_PGN_MOTIVO_TRAMITE.ID_ETAPA_POSTERIOR%TYPE;
    LESTADO_ACTIVIDAD       SDB_PGN_MOTIVO_TRAMITE.ESTADO_ACTIVIDAD%TYPE;
    LINDICADOR_DEVOLUCION   SDB_PGN_MOTIVO_TRAMITE.INDICADOR_DEVOLUCION%TYPE;
    LTIPO_COMPUERTA_LLEGADA SDB_PGN_MOTIVO_TRAMITE.TIPO_COMPUERTA_LLEGADA%TYPE;
    LDECISION_CALIFICACION  SDB_PGN_MOTIVO_TRAMITE.DECISION_CALIFICACION%TYPE;
BEGIN

--PKG_WORKFLOW.MENSAJES('CREA TUA LPROC_CREA_ETAPAS: '||TO_CHAR(PLID_TURNO_HISTORIA)||','||TO_CHAR(LID_TURNO_HISTORIA)||','||VID_TURNO||','||PID_SOLICITUD 
--      ||','||TO_CHAR(VID_TURNO_HISTORIA)||','||VID_PROCESO||','||VID_SUBPROCESO||','||TO_CHAR(VVERSION)||','||TO_CHAR(VMOTIVO_ACT) ||','||VID_ETAPA_ACT
--      ||','||VID_USUARIO_INSERCION||','||VIP_CREACION);
 
 	FOR VREC IN CurEtapaAdelante
	LOOP
    VCONTEOTH := 0;
--PKG_WORKFLOW.MENSAJES('ANTES:'||VID_PROCESO||','||VID_SUBPROCESO||','||VVERSION);
--PKG_WORKFLOW.MENSAJES('NUEVO:'||VID_PROCESO_TH||','||VID_SUBPROCESO_TH||','||VVERSION_TH);
    IF VID_PROCESO <> VID_PROCESO_TH and (VID_SUBPROCESO <> VID_SUBPROCESO_TH OR VVERSION <> VVERSION_TH) THEN
        LID_MOTIVO_TRAMITE  := NULL;
        LID_ETAPA_ORIGEN    := NULL;  
        LID_ETAPA_POSTERIOR := VID_ETAPA_ACT;
        LESTADO_ACTIVIDAD   := VESTADO_ACTIVIDAD_ACT;
        LINDICADOR_DEVOLUCION := 'N';
        LTIPO_COMPUERTA_LLEGADA :=  NULL;
        LDECISION_CALIFICACION := NULL;
     ELSE
        LID_MOTIVO_TRAMITE  := VREC.ID_MOTIVO_TRAMITE;
        LID_ETAPA_ORIGEN    := VREC.ID_ETAPA_ORIGEN;  
        LID_ETAPA_POSTERIOR := VREC.ID_ETAPA_POSTERIOR;
        LESTADO_ACTIVIDAD   := VREC.ESTADO_ACTIVIDAD;
        LINDICADOR_DEVOLUCION := VREC.INDICADOR_DEVOLUCION;
        LTIPO_COMPUERTA_LLEGADA := VREC.TIPO_COMPUERTA_LLEGADA;
        LDECISION_CALIFICACION := VREC.DECISION_CALIFICACION;
    END IF;
--PKG_WORKFLOW.MENSAJES('RESULTADO:'||LID_ETAPA_ORIGEN||','||LID_MOTIVO_TRAMITE||','||LID_ETAPA_POSTERIOR||','||LESTADO_ACTIVIDAD||','||LTIPO_COMPUERTA_LLEGADA);

    BEGIN --VALIDA SI EL FLUJO QUE SE QUIERE CREAR YA EXISTE
      SELECT COUNT(*)
         INTO VCONTEOTH
      FROM SDB_ACC_TURNO_HISTORIA 
      WHERE ID_ANTERIOR = PLID_TURNO_HISTORIA
      AND ID_ETAPA = LID_ETAPA_POSTERIOR
      AND NVL(ID_MOTIVO,0) = NVL(VMOTIVO_ACT,0)
      AND ID_PROCESO = VID_PROCESO
      and ID_SUBPROCESO = VID_SUBPROCESO
      and VERSION_SUBPROCESO = VVERSION;
      IF VCONTEOTH >0 THEN
          PRETORNO := -150;
          MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS DE ENTRADA. '|| TO_CHAR(pretorno) || ', ' || 'La solicitud ya tiene turno historia debe enviar un id_turno historia valido'||PMENSAJE,1,500);
          PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'ERROR EN PARAMETROS DE ENTRADA',PID_HISTORIA,PID_SOLICITUD,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
          PMENSAJE := SUBSTR(MENSAJE,1,500);
          CONTINUE;        
      END IF;
      EXCEPTION WHEN OTHERS THEN
      NULL;
    END;
---------------------------------------------------------------------------------------------------------------------------------------------------------
--                                                                        VERIFICA ETAPAS PARALELAS CON ESTADO <> TER DENTRO DEL FLUJO SOLICITUD O TURNO
---------------------------------------------------------------------------------------------------------------------------------------------------------

      VSQL := 'SELECT COUNT(*) FROM SDB_ACC_TURNO_HISTORIA TH '||
         ' INNER JOIN SDB_PGN_MOTIVO_TRAMITE MT ON TH.ID_ETAPA = MT.ID_ETAPA_ORIGEN AND TH.ID_PROCESO = MT.ID_PROCESO AND TH.ID_SUBPROCESO = MT.ID_SUBPROCESO'||
         ' AND TH.VERSION_SUBPROCESO = MT.VERSION_SUBPROCESO '||
         ' where TH.ID_TURNO_HISTORIA <> '|| TO_CHAR(PLID_TURNO_HISTORIA) ||
         ' AND TIPO_COMPUERTA_LLEGADA = ''PAR'''|| 
         ' AND MT.ID_ETAPA_POSTERIOR = ''' ||LID_ETAPA_POSTERIOR||''''||
         ' AND TH.ESTADO_ACTIVIDAD <> ''TER'''||
         ' AND TH.ID_PROCESO = '''||VID_PROCESO||''''||
         ' AND TH.ID_SUBPROCESO = '''||VID_SUBPROCESO||''''||
         ' AND TH.VERSION_SUBPROCESO = '||TO_CHAR(VVERSION)||
            CASE WHEN NVL(VID_TURNO,'NULL') <> 'NULL' THEN  ' AND TH.ID_TURNO = '''||VID_TURNO||''';'
                ELSE CASE WHEN NVL(VID_SOLICITUD,'NULL') <> 'NULL' THEN ' AND TH.ID_SOLICITUD = '''||VID_SOLICITUD||''';' ELSE 'AND 1<2' END END ;
    BEGIN 
      EXECUTE IMMEDIATE VSQL INTO VPARALELAS ;
         EXCEPTION WHEN OTHERS THEN
         VPARALELAS := 0;
    END;
    IF VPARALELAS > 0 THEN 
      CONTINUE;
    END IF;
-- se asigna el mismo usuario si la nueva etapa es diferente de XRP.
  IF LESTADO_ACTIVIDAD = 'AUT' THEN 
    VID_USUARIO := PKG_TRANSVERSALES.FUNC_CONSTANTE_CARACTER('USUARIO_PROCESOS_AUTOMATICOS',PID_USUARIO_ACCION,PIP_ACCION);  -- SI ES AUT SE ASIGNA USUARIO 
      BEGIN
        SELECT ID_CIRCULO
          INTO VID_CIRCULO_USUARIO
          FROM SDB_ACC_TURNO
          WHERE ID_TURNO = VID_TURNO;
          EXCEPTION WHEN OTHERS THEN
            NULL;
      END;
    ELSE
      IF LESTADO_ACTIVIDAD not in ('XRP','ASG') THEN
        BEGIN
          SELECT ID_USUARIO, ID_CIRCULO_USUARIO
            INTO VID_USUARIO, VID_CIRCULO_USUARIO
            FROM SDB_ACC_TURNO_HISTORIA
            WHERE ID_TURNO_HISTORIA = VTH_ANT;
            EXCEPTION WHEN OTHERS THEN
              NULL;
        END;
      END IF;
  END IF;
---------------------------------------------------------------------------------------------------------------------------------------------------------
--                                                                                                                     ETAPAS CON PERIODO DE VENCIMIENTO
---------------------------------------------------------------------------------------------------------------------------------------------------------
  IF LID_ETAPA_POSTERIOR IN (280,281,282,283,284) THEN
  -- 282 es en correccion.
  -- 283 es en calificacion.
    VTH_ANT := CASE WHEN LID_ETAPA_POSTERIOR IN (280,281,283) THEN PKG_REGISTRO.FUNC_ULTIMO_THIST_ETAPA(PLID_TURNO_HISTORIA, 80)
                    WHEN LID_ETAPA_POSTERIOR IN (282,284,285) THEN PKG_REGISTRO.FUNC_ULTIMO_THIST_ETAPA(PLID_TURNO_HISTORIA, 130)
                    ELSE NULL
               END;
    BEGIN
      SELECT ID_USUARIO, ID_CIRCULO_USUARIO
        INTO VID_USUARIO, VID_CIRCULO_USUARIO
        FROM SDB_ACC_TURNO_HISTORIA
        WHERE ID_TURNO_HISTORIA = VTH_ANT;
        EXCEPTION WHEN OTHERS THEN
          NULL;
    END;
    ELSE
      IF LID_ETAPA_POSTERIOR = 85 THEN
        VID_USUARIO := PID_USUARIO_ASIGNACION;
        VID_CIRCULO_USUARIO := PID_CIRCULO;
/*      ELSE
        VID_USUARIO := NULL;
        VID_CIRCULO_USUARIO := NULL;*/
      END IF;
  END IF;
---------------------------------------------------------------------------------------------------------------------------------------------------------
		BEGIN
      LID_TURNO_HISTORIA := SEC_ACC_TURNO_HISTORIA_ID_TURNO_HISTORIA.NEXTVAL;
--PKG_WORKFLOW.MENSAJES('>>>>PKG_WORK_FLOW.PROC_CREA_ETAPA: INSERT TUA EN : '||TO_CHAR(LID_TURNO_HISTORIA)||','||VID_TURNO||','||VID_SOLICITUD
--          ||','||TO_CHAR(LID_ETAPA_POSTERIOR)||','||LESTADO_ACTIVIDAD 
--          ||','||TO_CHAR(PLID_TURNO_HISTORIA)||','||VID_PROCESO||','||VID_SUBPROCESO||','||TO_CHAR(VVERSION)
--          ||','||VID_USUARIO_INSERCION||','||VIP_CREACION||','||VID_USUARIO||','||VID_CIRCULO_USUARIO);
          
      IF NVL(VMOTIVO_ACT,0) = 7 AND NVL(VID_USUARIO,'NULL') <> 'NULL' THEN --APOYO NACIONAL
          LESTADO_ACTIVIDAD := 'ASG';
      END IF;
      
         INSERT INTO SDB_ACC_TURNO_HISTORIA 
          (ID_TURNO_HISTORIA
          ,ID_TURNO
          ,ID_SOLICITUD
          ,ID_ETAPA
          ,ID_USUARIO
          ,ID_CIRCULO_USUARIO
          ,INDICADOR_DEVOLUCION
          ,ESTADO_ACTIVIDAD
          ,FECHA_REPARTO
          ,FECHA_INICIAL
          ,FECHA_FINAL
          ,CALIFICACION
          ,MOTIVO
          ,OBSERVACIONES
          ,ID_ANTERIOR
          ,ID_PROCESO
          ,ID_SUBPROCESO
          ,VERSION_SUBPROCESO
          ,MOTIVO_NO_TRAMITE
          ,OBSERVACIONES_NO_TRAMITE
          ,ID_MOTIVO
          ,GENERAR_RELACION
          ,NUMERO_RELACION
          ,ID_USUARIO_CREACION
          ,FECHA_CREACION
          ,IP_CREACION
          ,ID_USUARIO_MODIFICACION
          ,FECHA_MODIFICACION
          ,IP_MODIFICACION
          ,ID_DOCUMENTO_SALIDA)
          values
          ( LID_TURNO_HISTORIA 
          ,VID_TURNO
          ,VID_SOLICITUD
          ,LID_ETAPA_POSTERIOR
          ,CASE WHEN LESTADO_ACTIVIDAD <> 'XRP' THEN VID_USUARIO ELSE NULL END          -- ID_USUARIO
          ,CASE WHEN LESTADO_ACTIVIDAD <> 'XRP' THEN VID_CIRCULO_USUARIO ELSE NULL END  -- ID_CIRCULO_USUARIO
          ,LINDICADOR_DEVOLUCION      -- INDICADOR_DEVOLUCION
          ,LESTADO_ACTIVIDAD
          ,NULL     --FECHA_REPARTO
          ,NULL  -- FECHA_INICIAL
          ,NULL     -- FECHA_FINAL
          ,LDECISION_CALIFICACION     -- CALIFICACION SDB_PGN_MOTIVO_TRAMITE
          ,NULL     -- MOTIVO
          ,NULL     -- OBSERVACIONES
          ,PLID_TURNO_HISTORIA  -- ID_ANTERIOR
          ,VID_PROCESO
          ,VID_SUBPROCESO
          ,VVERSION
          ,vrec.DESCRIPCION --VMOTIVO     -- MOTIVO_NO_TRAMITE
          ,NULL     -- OBSERVACIONES_NO_TRAMITE
          ,NULL     -- ID_MOTIVO
          ,NULL     -- GENERAR_RELACION
          ,NULL     -- NUMERO_RELACION
          ,VID_USUARIO_INSERCION
          ,SYSTIMESTAMP
          ,VIP_CREACION
          ,NULL     -- ID_USUARIO_MODIFICACION
          ,NULL     -- FECHA_MODIFICACION
          ,NULL          -- IP_MODIFICACION
          ,VID_DOCUMENTO_SALIDA)
          RETURNING ID_TURNO_HISTORIA INTO PN_ID_TURNO_HISTORIA;
          LINSERTADOS := LINSERTADOS + 1;
          BEGIN
          LESTADO_ACTIVIDAD := CASE WHEN LESTADO_ACTIVIDAD <> 'XRP' and NVL(VID_USUARIO,'NULL') <> 'NULL' THEN 'ASG' ELSE LESTADO_ACTIVIDAD END;
--PKG_WORKFLOW.MENSAJES('PKG_WORKFLOW.PROC_CREA_ETAPA: SE VA A LPROC_REPARTO_ADICIONALES:' ||LID_TURNO_HISTORIA||' ,'||LESTADO_ACTIVIDAD||' ,'||LID_ETAPA_POSTERIOR);          
            LPROC_REPARTO_ADICIONALES (LID_TURNO_HISTORIA, LESTADO_ACTIVIDAD, LID_ETAPA_POSTERIOR, VID_TURNO, VID_SOLICITUD, VID_PROCESO,VMOTIVO_ACT,PLRETORNO);
            EXCEPTION WHEN OTHERS THEN 
              PLRETORNO := -90;
              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.CALL. '|| TO_CHAR(PLRETORNO) || 'ERROR LPROC_REPARTO_ADICIONALES: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'CALL',VID_PROCESO, VID_SUBPROCESO, VVERSION,PLID_TURNO_HISTORIA,NULL,PID_SOLICITUD,NULL,VID_TURNO_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,500);
          END; 
          EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
--PKG_WORKFLOW.MENSAJES('PROC_CREA_ETAPA: ERROR LLAVE DUPLICADA:'||SQLERRM);  
            PLRETORNO := -90;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || 'ERROR INSERTANDO ETAPA: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'INSERT',VID_PROCESO, VID_SUBPROCESO, VVERSION,PLID_TURNO_HISTORIA,NULL,PID_SOLICITUD,NULL,VID_TURNO_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
            RETURN;
          WHEN OTHERS THEN
--PKG_WORKFLOW.MENSAJES('PROC_CREA_ETAPA: ERROR AL CREAR TUA:'||SQLERRM);  
            PLRETORNO := -100;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || 'ERROR INSERTANDO EN SDB_ACC_TURNO_HSITORIA PARA LA SOLICITUD: '||PID_SOLICITUD ||'. '|| SQLERRM,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'INSERT',VID_PROCESO, VID_SUBPROCESO, VVERSION,PLID_TURNO_HISTORIA,NULL,PID_SOLICITUD,NULL,VID_TURNO_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
            RETURN;
    END;
--    END ;
  END LOOP;
  IF LINSERTADOS > 0 THEN
    PLRETORNO := LINSERTADOS;
    PMENSAJE := 'INSERTADOS CON EXITO: '||TO_CHAR(LINSERTADOS)||' TURNOS HISTORIA';
  END IF;
--PKG_WORKFLOW.MENSAJES('PROC_CREA_ETAPA: SALE DE LPROC_CREA_ETAPAS:'||LINSERTADOS);  
END LPROC_CREA_ETAPAS;
----------------------------------------------------------------------------------------------------------------------------------------------
--INICIA CUERPO PRINCIPAL
----------------------------------------------------------------------------------------------------------------------------------------------
BEGIN 
/*INICIALIZACION DE VARIABLES DE BITACORA*/
   VID_USUARIO_INSERCION := PID_USUARIO_ACCION;
   VIP_CREACION := PIP_ACCION;
   VID_USUARIO_MODIFICACION := PID_USUARIO_ACCION ;
   VFECHA_MODIFICACION := SYSTIMESTAMP;
   VIP_MODIFICACION := PIP_ACCION;
   PRMER_MENSAJE := 'PID_HISTORIA:'||NVL(TO_CHAR(PID_HISTORIA),'NULL')||', PID_TURNO:'||NVL(PID_TURNO,'NULL')||', PID_SOLICITUD:'||NVL(PID_SOLICITUD,'NULL')|| ', PID_USUARIO_ACCION :' || NVL(PID_USUARIO_ACCION ,'NULL') || ', PIP_ACCION:'|| NVL(PIP_ACCION,'NULL') ;
   VPROCESO := 'PROC_CREA_ETAPA';
   VEJECUCION := SUBSTR('PROC_CREA_ETAPA('||PRMER_MENSAJE||')',1,500);

   PMENSAJE := PKG_TRANSVERSALES.FUNC_PARAMETROS(PID_USUARIO => PID_USUARIO_ACCION, PIP_ACCION => PIP_ACCION );
   IF LENGTH(PMENSAJE) > 5 THEN 
      PRETORNO := -10;
      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.FUNC_PARAMETROS. '|| TO_CHAR(pretorno) || ', ' || 'VERIFIQUE LOS PARAMETROS DE LLAMADO: '||PMENSAJE,1,500);
      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'FUNC_PARAMETROS',PID_USUARIO_ACCION,PIP_ACCION,NULL,NULL,NULL,PID_SOLICITUD,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
      PMENSAJE := SUBSTR(MENSAJE,1,500);
      RETURN;
   END IF;
  IF NVL(PID_HISTORIA,0) = 0 AND NVL(PID_TURNO,'NULL') = 'NULL' AND NVL(PID_SOLICITUD,'NULL') = 'NULL' THEN
      PRETORNO := -20;
      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS. '|| TO_CHAR(pretorno) || ', ' || 'VERIFIQUE LOS PARAMETROS DE LLAMADO, AL MENOS UNO NO DEBE ESTAR VACIO. '||PMENSAJE,1,500);
      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'PARAMETROS',NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
      PMENSAJE := SUBSTR(MENSAJE,1,500);
      RETURN;
  END IF;
  pretorno := 0;
--validacion de parametros de entrada
--VALIDA SI EL TURNO_HISTORIA, EL ID_TURNO Y LA SOLICITUD ESTAN VACIOS
--PKG_WORKFLOW.MENSAJES('PROC_CREA_ETAPA:ENTRO'||PID_HISTORIA||','||PID_TURNO||','||PID_SOLICITUD||','||PID_USUARIO_ASIGNACION||','||PID_CIRCULO);
  IF NVL(PID_HISTORIA,0) = 0 THEN
    IF NVL(PID_SOLICITUD,'NULL') = 'NULL' THEN 
      PRETORNO := -110;
      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS DE ENTRADA. '|| TO_CHAR(pretorno) || ', ' || 'Debe enviar id_turno_historia o Id_solicitud validos. '||PMENSAJE,1,500);
      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'ERROR EN PARAMETROS DE ENTRADA',NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
      PMENSAJE := SUBSTR(MENSAJE,1,500);
      RETURN;
    ELSE
      BEGIN 
        SELECT COUNT(*) INTO VCONTEO FROM SDB_ACC_TURNO_HISTORIA WHERE ID_SOLICITUD = PID_SOLICITUD;
          IF VCONTEO > 0 THEN 
              PRETORNO := -120;
              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS DE ENTRADA. '|| TO_CHAR(pretorno) || ', ' || 'La solicitud ya tiene turno historia debe enviar un id_turno historia valido'||PMENSAJE,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'ERROR EN PARAMETROS DE ENTRADA',PID_HISTORIA,PID_SOLICITUD,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,500);
              RETURN;
            ELSE 
              BEGIN 
                SELECT  SDB_ACC_SOLICITUD.ID_PROCESO, SDB_ACC_SOLICITUD.ID_SUBPROCESO, VERSION_SUBPROCESO, DESCRIPCION,ID_TURNO_ANT --VERSION DE LA TABLA ACTUALMENTE NO EXISTE EN SOLICITUD
                  INTO VID_PROCESO, VID_SUBPROCESO, VVERSION,VDESCRIPCION_SOL,VID_TURNO_ANT
                  FROM SDB_ACC_SOLICITUD 
                  WHERE SDB_ACC_SOLICITUD.ID_SOLICITUD = PID_SOLICITUD; 
                EXCEPTION WHEN NO_DATA_FOUND THEN
                      PRETORNO := -122;
                      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO NO EXISTE SOLICITUD: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                      PMENSAJE := SUBSTR(MENSAJE,1,500);
                      RETURN;
                  WHEN OTHERS THEN
                      PRETORNO := -125;
                      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SOLICITUD '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                      PMENSAJE := SUBSTR(MENSAJE,1,500);
                      RETURN;
              END;
              IF NVL(VVERSION,0) = 0 THEN
                VVERSION := FUNC_ULTIMA_VERSION(VID_PROCESO, VID_SUBPROCESO);
              END IF;
              BEGIN
                SELECT SDB_ACC_SUBPROCESO_VERSION.ID_ETAPA_INICIAL, SDB_ACC_SUBPROCESO_VERSION.ESTADO_ACTIVIDAD
                INTO VID_ETAPA_ACT, VESTADO_ACTIVIDAD_ACT
                FROM SDB_ACC_SUBPROCESO_VERSION 
                WHERE SDB_ACC_SUBPROCESO_VERSION.ID_PROCESO = VID_PROCESO
                  AND SDB_ACC_SUBPROCESO_VERSION.ID_SUBPROCESO = VID_SUBPROCESO
                  AND SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO = VVERSION;
                EXCEPTION WHEN NO_DATA_FOUND THEN
                  PRETORNO := -160;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR NO EXISTE SUBPROCESO PARA LA SOLICITUD: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,VID_PROCESO, VID_SUBPROCESO, VVERSION,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
                WHEN OTHERS THEN
                  PRETORNO := -170;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SUBPROCESO PARA LA SOLICITUD: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
              END; 
  VTID_MOTIVO := 10;
  IF VID_PROCESO = '1' and VID_SUBPROCESO in ('9','10','11','12','13','14','15','18') then -- certificados especiales 
    begin
      select COUNT(*) INTO VTCONTEO  from SDB_ACC_COMPLETITUD_DOCUMENTAL
      WHERE ID_SOLICITUD = PID_SOLICITUD;
      EXCEPTION WHEN NO_DATA_FOUND THEN
        PRETORNO := -172;
        MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR NO EXISTE COMPLETITUD DOCUMENTAL PARA LA SOLICITUD: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
        PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,VID_PROCESO, VID_SUBPROCESO, VVERSION,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
        PMENSAJE := SUBSTR(MENSAJE,1,500);
        RETURN;
      WHEN OTHERS THEN
        PRETORNO := -174;
        MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SUBPROCESO PARA LA SOLICITUD: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
        PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
        PMENSAJE := SUBSTR(MENSAJE,1,500);
        RETURN;
    end;
    IF VTCONTEO = 0 THEN
        VTID_MOTIVO := 15;
      ELSE 
        VTID_MOTIVO := 10;
    END IF;
  END IF;
-- CREA LA ETAPA INICIAL EN TURNO HISTORIA
              BEGIN
                VID_TURNO_HISTORIA := SEC_ACC_TURNO_HISTORIA_ID_TURNO_HISTORIA.NEXTVAL;
                INSERT INTO SDB_ACC_TURNO_HISTORIA 
                (ID_TURNO_HISTORIA
                ,ID_TURNO
                ,ID_SOLICITUD
                ,ID_ETAPA
                ,ID_USUARIO
                ,ID_CIRCULO_USUARIO
                ,INDICADOR_DEVOLUCION
                ,ESTADO_ACTIVIDAD
                ,FECHA_REPARTO
                ,FECHA_INICIAL
                ,FECHA_FINAL
                ,CALIFICACION
                ,MOTIVO
                ,OBSERVACIONES
                ,ID_ANTERIOR
                ,ID_PROCESO
                ,ID_SUBPROCESO
                ,VERSION_SUBPROCESO
                ,MOTIVO_NO_TRAMITE
                ,OBSERVACIONES_NO_TRAMITE
                ,ID_MOTIVO
                ,GENERAR_RELACION
                ,NUMERO_RELACION
                ,ID_USUARIO_CREACION
                ,FECHA_CREACION
                ,IP_CREACION
                ,ID_USUARIO_MODIFICACION
                ,FECHA_MODIFICACION
                ,IP_MODIFICACION)
                VALUES
                ( VID_TURNO_HISTORIA  --ID_TURNO_HISTORIA
                ,NULL --VID_TURNO_ANT        --ID_TURNO
                ,PID_SOLICITUD        --ID_SOLICITUD
                ,VID_ETAPA_ACT        --ID_ETAPA
                ,NULL                 --ID_USUARIO
                ,NULL                 --ID_CIRCULO_USUARIO
                ,'N'                  --INDICADOR_DEVOLUCION
                ,VESTADO_ACTIVIDAD_ACT  --ESTADO_ACTIVIDAD
                ,NULL                   --FECHA_REPARTO
                ,NULL                   --FECHA_INICIAL
                ,NULL                   --FECHA_FINAL
                ,NULL                   --CALIFICACION
                ,NULL                   --MOTIVO
                ,VDESCRIPCION_SOL       --OBSERVACIONES
                ,NULL                   --ID_ANTERIOR
                ,VID_PROCESO            --ID_PROCESO
                ,VID_SUBPROCESO         --ID_SUBPROCESO
                ,VVERSION               --VERSION
                ,NULL                   --MOTIVO_NO_TRAMITE
                ,NULL                   --OBSERVACIONES_NO_TRAMITE
                ,VTID_MOTIVO             ------------------------------->>>>>>>>>>>>>>>>>>>>>>>>>>> SE ASIGNA 10 POR DEFECTO. ID_MOTIVO INICIAL?
                ,NULL                   --GENERAR_RELACION
                ,NULL                   --NUMERO_RELACION
                ,VID_USUARIO_INSERCION  --ID_USUARIO_CREACION
                ,SYSTIMESTAMP          --FECHA_CREACION
                ,VIP_CREACION          --IP_CREACION
                ,NULL                   --ID_USUARIO_MODIFICACION
                ,NULL                   --FECHA_MODIFICACION
                ,NULL)                 --IP_MODIFICACION
                RETURNING ID_TURNO_HISTORIA,ID_TURNO,ID_SOLICITUD, ID_ETAPA, ESTADO_ACTIVIDAD, ID_MOTIVO, ID_PROCESO, ID_SUBPROCESO, VERSION_SUBPROCESO
                INTO PN_ID_TURNO_HISTORIA,VID_TURNO, VID_SOLICITUD,VID_ETAPA_ACT, VESTADO_ACTIVIDAD_ACT, VMOTIVO_ACT, VID_PROCESO, VID_SUBPROCESO, VVERSION;
--PKG_WORKFLOW.MENSAJES('INSERTA 1 TUA:'||TO_CHAR(VID_TURNO_HISTORIA)||','||TO_CHAR(VID_ETAPA_ACT)||','|| VESTADO_ACTIVIDAD_ACT||','|| VID_PROCESO||','|| VID_SUBPROCESO||','||TO_CHAR( VVERSION));                  
                VINICIA_FLUJO := 'N';
-- CREAR TURNOS SI LA ETAPA INICIAL QUEDA EN ESPERA.                
                IF VESTADO_ACTIVIDAD_ACT = 'ESP' THEN
                  BEGIN
                    UPDATE SDB_ACC_TURNO_HISTORIA
                    SET ESTADO_ACTIVIDAD = 'TER'
                    ,ID_MOTIVO = 10
                    ,ID_USUARIO_MODIFICACION = NVL(VID_USUARIO_INSERCION,USER)
                    ,FECHA_MODIFICACION = SYSTIMESTAMP
                    ,IP_MODIFICACION = NVL(VIP_CREACION,PKG_TRANSVERSALES.FUNC_IP_ACCION())
                    WHERE ID_TURNO_HISTORIA = VID_TURNO_HISTORIA;
                    EXCEPTION WHEN NO_DATA_FOUND THEN
                      PRETORNO := -210;
                      PMENSAJE := SUBSTR(PRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PRETORNO) || ', NO SE ACTUALIZO TURNO HISTORIA ' || TO_CHAR(VID_TURNO_HISTORIA)||' PARA CREAR TURNOS. ' || SQLERRM,1,500) ;
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'UPDATE',NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                      RETURN;
                    WHEN OTHERS THEN
                      PRETORNO := -230;
                      PMENSAJE := SUBSTR(PRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PRETORNO) || ', NO SE ACTUALIZO TURNO HISTORIA ' || TO_CHAR(VID_TURNO_HISTORIA)||' PARA CREAR TURNOS. '  || SQLERRM,1,500) ;
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'UPDATE',NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                      RETURN;
                  END;
                  BEGIN  
--PKG_WORKFLOW.MENSAJES('SE VA A CREAR TURNOS DESDE ETAPA 10'||VID_SOLICITUD||','||VID_TURNO_HISTORIA||','||VID_USUARIO_INSERCION||','||VIP_CREACION);
                    PKG_REGISTRO.PROC_CREAR_TURNO(VID_SOLICITUD,VID_TURNO_HISTORIA,VID_USUARIO_INSERCION,VIP_CREACION,PRETORNO,PMENSAJE);
--PKG_WORKFLOW.MENSAJES('REGRESA A ETAPA 10 DESDE CREAR TURNOS:'||PRETORNO||','||PMENSAJE);
                    --IF PRETORNO < 0 THEN 
                      RETURN;
                      
                    --END IF; 
                    EXCEPTION WHEN OTHERS THEN
                      PRETORNO := -170;
                      PMENSAJE := SUBSTR(PRMER_MENSAJE ||'.CALL. DESDE PROC_CREA_ETAPA'|| TO_CHAR(PRETORNO) || ', ERROR EN LA EJECUCION DE PROC_CREAR_TURNO NUMERO DE REFERENCIA: ' || NULL||', ID_TURNO_HISTORIA:'||TO_CHAR(VID_TURNO_HISTORIA)||'. ' || SQLERRM,1,500) ;
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SELECT',NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,NULL,VID_TURNO_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                      RETURN;
                  END;
                END IF;
/*                  begin
                 LPROC_CREA_ETAPAS ( VID_TURNO_HISTORIA, PCREAR, PRETORNO );
PKG_WORKFLOW.MENSAJES('VUELVE DE LPROC_CREA_ETAPAS'||PCREAR||','|| PRETORNO);
                  IF PRETORNO < 0 THEN
                    PRETORNO := -130;
                    MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN CREACION DE ETAPA POSTERIOR A: '||TO_CHAR(VID_ETAPA_ACT)||'. ' ||TO_CHAR(pretorno) ||'. '||PMENSAJE,1,500);
                    PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                    PMENSAJE := SUBSTR(MENSAJE,1,500);
                    RETURN;
                  END IF ;
                END;*/
                EXCEPTION WHEN DUP_VAL_ON_INDEX THEN
                  PRETORNO := -140;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(pretorno) || 'ERROR INSERTANDO ETAPA INICIAL: '||PID_SOLICITUD ||'. '|| SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'INSERT',VID_PROCESO, VID_SUBPROCESO, VVERSION,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
                WHEN OTHERS THEN
                  PRETORNO := -150;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(pretorno) || 'ERROR INSERTANTDO EN SDB_ACC_TURNO_HISTORIA PARA LA SOLICITUD: '||PID_SOLICITUD ||'. '||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'INSERT',VID_PROCESO, VID_SUBPROCESO, VVERSION,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
              END;
          END IF;
        EXCEPTION WHEN NO_DATA_FOUND THEN
              VCONTEO := 0;
          WHEN OTHERS THEN
              PRETORNO := -180;
              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SOLICITUD EN VALIDANDO PARA CREACION DE ETAPA: '||PID_SOLICITUD || SQLERRM,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,500);
              RETURN;
      END;
    END IF; -- FIN VALIDA SOLICITUD
  ELSE
    BEGIN 
      SELECT ID_SOLICITUD,ID_TURNO, ID_ETAPA, ESTADO_ACTIVIDAD, ID_MOTIVO, ID_PROCESO, ID_SUBPROCESO, VERSION_SUBPROCESO,MOTIVO,ID_DOCUMENTO_SALIDA
        INTO VID_SOLICITUD,VID_TURNO, VID_ETAPA_ACT, VESTADO_ACTIVIDAD_ACT, VMOTIVO_ACT, VID_PROCESO, VID_SUBPROCESO, VVERSION,VMOTIVO,VID_DOCUMENTO_SALIDA
      FROM SDB_ACC_TURNO_HISTORIA 
      WHERE ID_TURNO_HISTORIA = PID_HISTORIA;
        VID_TURNO_HISTORIA := PID_HISTORIA;
        VID_PROCESO_TH := VID_PROCESO;
        VID_SUBPROCESO_TH := VID_SUBPROCESO;
        VVERSION_TH := VVERSION;
--PKG_WORKFLOW.MENSAJES('entra por turno_historia:'||TO_CHAR(VID_TURNO_HISTORIA)||','||TO_CHAR(VID_ETAPA_ACT)||','|| VESTADO_ACTIVIDAD_ACT||','|| VID_PROCESO||','|| VID_SUBPROCESO||','||TO_CHAR( VVERSION)||',ID_MOTIVO:'||VMOTIVO_ACT);                  
        IF NVL(VID_TURNO,'NULL') = 'NULL' THEN
          IF NVL(PID_TURNO,'NULL') = 'NULL' THEN
            VINICIA_FLUJO := 'N';
/*            BEGIN
              PRETORNO := -185;
              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.PARAMETROS. '|| TO_CHAR(pretorno) || ', ' || 'EL ID_TURNO DEL ID_TURNO_HISTORIA SE ENCUENTRA VACIO, DEBE ENVIAR EL TURNO QUE INICIA FLUJO '||PMENSAJE,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,TO_CHAR(VID_TURNO_HISTORIA),NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,NULL,VID_TURNO_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,500);
              RETURN;
            END;*/
          ELSE
            SELECT COUNT(*) INTO VCONTEO FROM SDB_ACC_TURNO_HISTORIA WHERE ID_TURNO = PID_TURNO AND ID_TURNO_HISTORIA <> VID_TURNO_HISTORIA;
            IF VCONTEO > 0 THEN 
              BEGIN
                PRETORNO := -188;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.PARAMETROS. '|| TO_CHAR(pretorno) || ', ' || 'YA EXISTE FLUJO PARA EL ID_TURNO, DEBE ENVIAR EL ID_TURNO_HISTORIA QUE CONTINUA EL FLUJO ('||PID_TURNO||'). '||PMENSAJE,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,TO_CHAR(VID_TURNO_HISTORIA),NULL,NULL,NULL,NULL,NULL,VID_SOLICITUD,NULL,VID_TURNO_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
                RETURN;
              END;
            ELSE
--PKG_WORKFLOW.MENSAJES('entra por turno INICIA FLUJO:'||PID_TURNO||','||TO_CHAR(VID_TURNO_HISTORIA)||','||TO_CHAR(VID_ETAPA_ACT)||','|| VESTADO_ACTIVIDAD_ACT||','|| VID_PROCESO||','|| VID_SUBPROCESO||','||TO_CHAR( VVERSION)||',ID_MOTIVO:'||VMOTIVO_ACT);                  
              VID_TURNO := PID_TURNO;
              VINICIA_FLUJO := 'S';
            END IF;
          END IF;
          ELSE 
          VINICIA_FLUJO := 'N';
        END IF;
        EXCEPTION WHEN NO_DATA_FOUND THEN
          PRETORNO := -190;
          MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS DE ENTRADA. '|| TO_CHAR(pretorno) || ', ' || 'Turno historia no existe. '||PMENSAJE,1,500);
          PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'ERROR EN PARAMETROS DE ENTRADA',PID_HISTORIA,PID_SOLICITUD,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
          PMENSAJE := SUBSTR(MENSAJE,1,500);
          RETURN;
        WHEN OTHERS THEN
          PRETORNO := -200;
          MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SOLICITUD EN VALIDANDO PARA CREACION DE ETAPA: '||PID_SOLICITUD || SQLERRM,1,500);
          PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
          PMENSAJE := SUBSTR(MENSAJE,1,500);
          RETURN;
    END;
  END IF;
--INICIA PROCESO
--  BEGIN
--   SELECT COUNT(*) INTO VCONTEO FROM SDB_ACC_TURNO_HISTORIA WHERE ID_SOLICITUD = PID_SOLICITUD;
--        EXCEPTION WHEN NO_DATA_FOUND THEN
--          VCONTEO := 0;
--        WHEN OTHERS THEN
--          PRETORNO := -140;
--          MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SOLICITUD EN VALIDANDO PARA CREACION DE ETAPA: '||PID_SOLICITUD || SQLERRM,1,500);
--          PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,VREC.ID_SOLICITUD,VREC.ID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
--          PMENSAJE := SUBSTR(MENSAJE,1,500);
--          RETURN;
--  END;
--SI EL TURNO HISTORIA ES NULL Y NO EXISTE TURNO HISTORIA PARA LA SOLICITUD DEBE CREAR 
  IF NVL(VID_TURNO_HISTORIA,0) <> 0 THEN
    IF VINICIA_FLUJO = 'S' THEN
   /*     BEGIN
           SELECT ID_TURNO, ID_PROCESO, ID_SUBPROCESO, 2 --VERSION
              INTO VID_TURNO, VID_PROCESO, VID_SUBPROCESO, VVERSION
            FROM SDB_ACC_TURNO_HISTORIA 
            WHERE ID_TURNO_HISTORIA = VID_TURNO_HISTORIA;
              EXCEPTION WHEN NO_DATA_FOUND THEN
                PRETORNO := -220;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS DE ENTRADA. '|| TO_CHAR(pretorno) || ', ' || 'Turno no existe. '||PMENSAJE,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'ERROR EN PARAMETROS DE ENTRADA',PID_HISTORIA,PID_SOLICITUD,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
                RETURN;
              WHEN OTHERS THEN
                PRETORNO := -230;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_TURNO:: '||PID_TURNO|| SQLERRM,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
                RETURN;
        END ;*/
          /*PRETORNO := -210;
          MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS DE ENTRADA. '|| TO_CHAR(pretorno) || ', ' || 'Debe enviar id_turno o Id_solicitud validos. '||PMENSAJE,1,500);
          PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'ERROR EN PARAMETROS DE ENTRADA',NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
          PMENSAJE := SUBSTR(MENSAJE,1,500);
          RETURN; */
       -- ELSE
          BEGIN 
            SELECT SDB_ACC_TURNO.ID_SOLICITUD, SDB_ACC_TURNO.ID_PROCESO, SDB_ACC_TURNO.ID_SUBPROCESO, SDB_ACC_SOLICITUD.DESCRIPCION --->>> ACTUALMENTE NO EXISTE EN LA TABLA
              INTO VID_SOLICITUD, VID_PROCESO, VID_SUBPROCESO, VDESCRIPCION_SOL
            FROM SDB_ACC_TURNO 
            INNER JOIN SDB_ACC_SOLICITUD ON SDB_ACC_TURNO.ID_SOLICITUD = SDB_ACC_SOLICITUD.ID_SOLICITUD
            WHERE SDB_ACC_TURNO.ID_TURNO = VID_TURNO;
            VVERSION := FUNC_ULTIMA_VERSION(VID_PROCESO, VID_SUBPROCESO);
--PKG_WORKFLOW.MENSAJES('lee turno: VID_SOLICITUD:'||VID_SOLICITUD||',VID_PROCESO:'||VID_PROCESO||',VID_SUBPROCESO:'||VID_SUBPROCESO||',VDESCRIPCION_SOL:'||VDESCRIPCION_SOL||',VVERSION:'||VVERSION); 
--PKG_WORKFLOW.MENSAJES('datos turno historia:'||',VID_PROCESO_TH:'||VID_PROCESO_TH||',VID_SUBPROCESO_TH:'||VID_SUBPROCESO_TH||',VVERSION_TH:'||VVERSION_TH);   
            IF VID_PROCESO <> VID_PROCESO_TH AND (VID_SUBPROCESO <> VID_SUBPROCESO_TH OR VVERSION <> VVERSION_TH) THEN
              BEGIN
                SELECT SDB_ACC_SUBPROCESO_VERSION.ID_ETAPA_INICIAL, SDB_ACC_SUBPROCESO_VERSION.ESTADO_ACTIVIDAD
                INTO VID_ETAPA_ACT, VESTADO_ACTIVIDAD_ACT
                FROM SDB_ACC_SUBPROCESO_VERSION 
                WHERE SDB_ACC_SUBPROCESO_VERSION.ID_PROCESO = VID_PROCESO
                  AND SDB_ACC_SUBPROCESO_VERSION.ID_SUBPROCESO = VID_SUBPROCESO
                  AND SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO = VVERSION;
                EXCEPTION WHEN NO_DATA_FOUND THEN
                  PRETORNO := -215;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR NO EXISTE SUBPROCESO PARA EL TURNO: '||VID_TURNO ||'. '||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,VID_PROCESO, VID_SUBPROCESO, VVERSION,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
                WHEN OTHERS THEN
                  PRETORNO := -218;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SUBPROCESO PARA EL TURNO: '||VID_TURNO ||'. '||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
              END; 
              BEGIN
               SELECT min(ID_MOTIVO) into VMOTIVO_ACT 
               FROM SDB_PGN_MOTIVO_TRAMITE  
                WHERE ID_PROCESO = VID_PROCESO
                AND ID_SUBPROCESO = VID_SUBPROCESO 
                and VERSION_SUBPROCESO = VVERSION 
                and ID_ETAPA_ORIGEN = VID_ETAPA_ACT;
                EXCEPTION WHEN NO_DATA_FOUND THEN
                  PRETORNO := -217;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR NO EXISTE SDB_PGN_MOTIVO_TRAMITE PARA EL FLUJO: '||VID_PROCESO||','||VID_SUBPROCESO||','||VVERSION||','||VID_ETAPA_ACT||'. '||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,VID_PROCESO, VID_SUBPROCESO, VVERSION,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
                WHEN OTHERS THEN
                  PRETORNO := -219;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_SUBPROCESO PARA  EL FLUJO: '||VID_PROCESO||','||VID_SUBPROCESO||','||VVERSION||','||VID_ETAPA_ACT||'. '||SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,NULL,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
              END;
            END IF;
              EXCEPTION WHEN NO_DATA_FOUND THEN
                PRETORNO := -220;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS DE ENTRADA. '|| TO_CHAR(pretorno) || ', ' || 'Turno no existe. '||PMENSAJE,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'ERROR EN PARAMETROS DE ENTRADA',PID_HISTORIA,PID_SOLICITUD,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
                RETURN;
              WHEN OTHERS THEN
                PRETORNO := -230;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(pretorno) || 'ERROR LEYENDO SDB_ACC_TURNO:: '||PID_TURNO|| SQLERRM,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
                RETURN;
          END;          
    END IF;
    DECLARE 
      RN_CREAR    CHAR(1);
      RN_RETORNO  INTEGER;
      RN_MENSAJE  VARCHAR2(4000);
    BEGIN
        LPROC_REGLAS_NEGOCIO (
          VID_TURNO_HISTORIA,
          RN_CREAR,
          RN_RETORNO,
          RN_MENSAJE
        ) ;
--PKG_WORKFLOW.MENSAJES('PROC_CREA_ETAPA:REGLAS DE NEGOCIO'||VID_TURNO_HISTORIA||','||RN_RETORNO||','||RN_MENSAJE);           
        BEGIN
          UPDATE SDB_ACC_TURNO_HISTORIA
          SET RESULTADO_AVANCE = RN_RETORNO
            , OBSERVACION_AVANCE = RN_MENSAJE
          WHERE ID_TURNO_HISTORIA = VID_TURNO_HISTORIA;
          EXCEPTION WHEN OTHERS THEN
            PRETORNO := -250;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.REGLAS DE NEGOCIO. '|| TO_CHAR(pretorno) || 'NO SUPERO LAS REGLAS DE NEGOCIO Y NO SE GRABO EN OBSERVACION_AVANCE: ID_TURNO_HISTORIA:'||VID_TURNO_HISTORIA,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
            RETURN;
        END;
        IF RN_RETORNO < 0 THEN
            PRETORNO := -240;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.REGLAS DE NEGOCIO. '|| TO_CHAR(pretorno) || 'NO SUPERO LAS REGLAS DE NEGOCIO: ID_TURNO_HISTORIA:'||VID_TURNO_HISTORIA,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,NULL,NULL,NULL,NULL,NULL,NULL,PID_SOLICITUD,PID_TURNO,PID_HISTORIA,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
            RETURN;
        END IF;
    END;
     BEGIN 
--PKG_WORKFLOW.MENSAJES('VA A REVISAR HACIA ATRAS...');
    --VERIFICA SI PUEDE AVANZAR
        LPROC_ATRAS ( 
          VID_TURNO_HISTORIA,
          PCREAR ,
          PRETORNO);
--PKG_WORKFLOW.MENSAJES('REGRESA DE LPROC_ATRAS'||PCREAR||','||TO_CHAR(PRETORNO));
      IF PRETORNO = 0 AND PCREAR = 'S' THEN
-- FINALIZA LAS ETAPAS EXCLUSIVAS CON TERMINACION 
        I := NVL(VARR_TH_CERRAR.FIRST(),0);
        LOOP
          EXIT WHEN VARR_TH_CERRAR.COUNT() = 0;
          BEGIN
            UPDATE SDB_ACC_TURNO_HISTORIA
            SET ESTADO_ACTIVIDAD = 'TER'
              ,ID_USUARIO_MODIFICACION = VID_USUARIO_MODIFICACION
              ,FECHA_MODIFICACION = VFECHA_MODIFICACION 
              ,IP_MODIFICACION = VIP_MODIFICACION
            WHERE ID_TURNO_HISTORIA = VARR_TH_CERRAR(I).AID_TURNO_HISTORIA;
          
          END;
          EXIT WHEN I = VARR_TH_CERRAR.LAST();
          I := VARR_TH_CERRAR.NEXT(I);
--          PKG_WORKFLOW.MENSAJES('TERMINANDO ETAPAS CICLO :'||I);
        END LOOP;

-- CREA LAS NUEVA ETAPAS
        --PKG_WORKFLOW.MENSAJES('VA A CREAR ETAPA:'||VID_TURNO_HISTORIA);
        LPROC_CREA_ETAPAS ( 
          VID_TURNO_HISTORIA,
          PCREAR,
          PRETORNO);
      ELSE 
          PRETORNO := -999;
          MENSAJE := SUBSTR(PRMER_MENSAJE ||'.CREA_ETAPA. '|| TO_CHAR(pretorno) || 'ETAPA PARALELA SIN TERMINAR: '||PID_SOLICITUD || SQLERRM,1,500);
        RETURN;
      END IF;
    END;
  END IF;
  IF PRETORNO >= 0 THEN 
    PMENSAJE := NVL(MENSAJE,'SE CREARON:'|| TO_CHAR(PRETORNO)||' TURNOS HISTORIA');
  END IF;
/*tablas */
--CREATE OR REPLACE EDITIONABLE SYNONYM "C##ADM_WORKFLOW_ENGINE"."SDB_ACC_BITACORA_AUD" FOR "C##SDBP"."SDB_ACC_BITACORA_AUD";
--CREATE OR REPLACE EDITIONABLE SYNONYM "C##ADM_WORKFLOW_ENGINE"."SDB_ACC_BITACORA_PROCESO" FOR "C##SDBP"."SDB_ACC_BITACORA_PROCESO";
--CREATE OR REPLACE EDITIONABLE SYNONYM "C##ADM_WORKFLOW_ENGINE"."SDB_ACC_SOLICITUD" FOR "C##SDBP"."SDB_ACC_SOLICITUD";
--CREATE OR REPLACE EDITIONABLE SYNONYM "C##ADM_WORKFLOW_ENGINE"."SDB_ACC_TURNO" FOR "C##SDBP"."SDB_ACC_TURNO";
END PROC_CREA_ETAPA;

--------------------------------------------------------------------------------------------------------------------------------
--2 create or replace PROCEDURE "PROC_APRUEBA_FLUJO" 
--------------------------------------------------------------------------------------------------------------------------------
PROCEDURE PROC_APRUEBA_FLUJO
( 
  PID_PROCESO              IN VARCHAR2,
  PID_SUBPROCESO           IN VARCHAR2,
  PVERSION                 IN NUMBER,
  PID_USUARIO_ACCION       IN VARCHAR2,
  PIP_ACCION               IN VARCHAR2, 
  PRETORNO		             OUT INTEGER,
	PMENSAJE		             OUT VARCHAR2
)
AS
/*VARIABLES DE TRABAJO*/
VID_PROCESO             SDB_ACC_PROCESO.ID_PROCESO%TYPE; 
VNOMBRE                 SDB_ACC_PROCESO.NOMBRE%TYPE;  
VRECEPCION_DOCUMENTO    SDB_ACC_PROCESO.RECEPCION_DOCUMENTO%TYPE; 
VACTIVO                 SDB_ACC_PROCESO.ACTIVO%TYPE; 
VID_SUBPROCESO          SDB_ACC_SUBPROCESO.ID_SUBPROCESO%TYPE;
VID_ETAPA               SDB_PGN_ETAPA.ID_ETAPA%TYPE;
VESTADO                 SDB_PGN_ETAPA.ESTADO%TYPE;
VVERSION                SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO%TYPE;
VVERSION_NVA            SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO%TYPE;
VESTADO_FLUJO           SDB_ACC_SUBPROCESO_VERSION.ESTADO_FLUJO%TYPE;
VID_MOTIVO_TRAMITE      SDB_PGN_MOTIVO_TRAMITE.ID_MOTIVO_TRAMITE%TYPE;
VID_REGLA_NEGOCIO       SDB_PGN_MOTIVO_TRAMITE_REGLA.ID_REGLA_NEGOCIO%TYPE;
VID_MOTIVO               SDB_PGN_MOTIVO_TRAMITE.ID_MOTIVO%TYPE;
VID_ETAPA_ORIGEN         SDB_PGN_MOTIVO_TRAMITE.ID_ETAPA_ORIGEN%TYPE;
VID_ETAPA_POSTERIOR      SDB_PGN_MOTIVO_TRAMITE.ID_ETAPA_POSTERIOR%TYPE;

/*VARIABLES PARA REGISTRO DE LA BITACORA DE PROCESO*/
  VPROCESO                   SDB_ACC_BITACORA_PROCESO.PROCESO%TYPE; 
  VEJECUCION                 SDB_ACC_BITACORA_PROCESO.EJECUCION%TYPE; 
  VDESCRIPCION               SDB_ACC_BITACORA_PROCESO.DESCRIPCION%TYPE;
  VID_USUARIO_INSERCION      SDB_ACC_BITACORA_PROCESO.ID_USUARIO_CREACION%TYPE; 
  VIP_CREACION               SDB_ACC_BITACORA_PROCESO.IP_CREACION%TYPE; 
  VID_USUARIO_MODIFICACION   SDB_ACC_BITACORA_PROCESO.ID_USUARIO_MODIFICACION%TYPE;
  VFECHA_MODIFICACION        SDB_ACC_BITACORA_PROCESO.FECHA_MODIFICACION%TYPE;
  VIP_MODIFICACION           SDB_ACC_BITACORA_PROCESO.IP_MODIFICACION%TYPE;
  VRETORNO                   INTEGER;
  PLRETORNO                  INTEGER;
  VMENSAJE                   VARCHAR2(500);
  MENSAJE                    VARCHAR2(500);
  PRMER_MENSAJE              VARCHAR2(500);

-----------------------------------------------------------------------------------------------  

BEGIN
/*INICIALIZACION DE VARIABLES DE BITACORA*/
   VID_USUARIO_INSERCION := PID_USUARIO_ACCION;
   VIP_CREACION := PIP_ACCION;
   VID_USUARIO_MODIFICACION := PID_USUARIO_ACCION ;
   VFECHA_MODIFICACION := SYSTIMESTAMP;
   VIP_MODIFICACION := PIP_ACCION;
   PRMER_MENSAJE := 'PID_PROCESO:'||NVL(TO_CHAR(PID_PROCESO),'NULL')||', PID_SUBPROCESO:'||NVL(PID_SUBPROCESO,'NULL')||', PVERSION:'||NVL(to_char(PVERSION),'NULL')|| ', PID_USUARIO_ACCION :' || NVL(PID_USUARIO_ACCION ,'NULL') || ', PIP_ACCION:'|| NVL(PIP_ACCION,'NULL') ;
   VPROCESO := 'PROC_APRUEBA_FLUJO';
   VEJECUCION := SUBSTR('PROC_APRUEBA_FLUJO('||PRMER_MENSAJE||')',1,500);

   PMENSAJE := PKG_TRANSVERSALES.FUNC_PARAMETROS(PID_USUARIO => PID_USUARIO_ACCION, PIP_ACCION => PIP_ACCION );
   IF LENGTH(PMENSAJE) > 5 THEN 
      PRETORNO := -10;
      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.FUNC_PARAMETROS. '|| TO_CHAR(pretorno) || ', ' || 'VERIFIQUE LOS PARAMETROS DE LLAMADO: '||PMENSAJE,1,500);
      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'FUNC_PARAMETROS',PID_USUARIO_ACCION,PIP_ACCION,NULL,NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
      PMENSAJE := SUBSTR(MENSAJE,1,500);
      RETURN;
   END IF;
  IF NVL(PID_PROCESO,0) = 0 OR NVL(PID_SUBPROCESO,'NULL') = 'NULL' OR NVL(to_char(PVERSION),'NULL') = 'NULL' THEN
      PRETORNO := -20;
      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.ERROR EN PARAMETROS. '|| TO_CHAR(pretorno) || ', ' || 'VERIFIQUE LOS PARAMETROS DE LLAMADO, AL MENOS UNO NO DEBE ESTAR VACIO. '||PMENSAJE,1,500);
      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'PARAMETROS',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
      PMENSAJE := SUBSTR(MENSAJE,1,500);
      RETURN;
  END IF;
--  BEGIN
--    SELECT ID_PROCESO, ID_SUBPROCESO, VERSION_SUBPROCESO, ESTADO_FLUJO
--    into VID_PROCESO, VID_SUBPROCESO, VVERSION, VESTADO_FLUJO
--    FROM SDB_ACC_SUBPROCESO_VERSION
--    WHERE ID_PROCESO = PID_PROCESO
--    AND ID_SUBPROCESO = PID_SUBPROCESO
--    AND VERSION_SUBPROCESO = PVERSION;
--        PLRETORNO := -25;
--        MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR EL FLUJO YA EXISTE SDB_ACC_SUBPROCESO_VERSION: ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION||', ESTADO_FLUJO:'||VESTADO_FLUJO|| '. '|| SQLERRM,1,500);
--        PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_SUBPROCESO_VERSION',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
--        PMENSAJE := SUBSTR(MENSAJE,1,500);
--        RETURN;
--    EXCEPTION 
--      WHEN NO_DATA_FOUND THEN
--        NULL;
--      WHEN OTHERS THEN 
--        PLRETORNO := -28;
--        MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR LEYENDO SDB_ACC_SUBPROCESO_VERSION PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
--        PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_SUBPROCESO_VERSION',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
--        PMENSAJE := SUBSTR(MENSAJE,1,500);
--        RETURN;
--  END;  
  pretorno := 0;
-- 1. VERIFICA PROCESOS: SI NO EXISTE LA CREA Y SI EXISTE ACTUALIZA
  FOR VREC_PROC IN (SELECT MTT.ID_PROCESO, PT.NOMBRE, PT.RECEPCION_DOCUMENTO,COUNT(*) CONTEO
                  FROM SDB_PGN_MOTIVO_TRAMITE_TRABAJO MTT
                  INNER JOIN SDB_ACC_PROCESO_TRABAJO PT ON PT.ID_PROCESO = MTT.ID_PROCESO
                  WHERE MTT.ID_PROCESO = PID_PROCESO
                    AND MTT.ID_SUBPROCESO = PID_SUBPROCESO 
                    AND MTT.VERSION = PVERSION 
                    GROUP BY MTT.ID_PROCESO, PT.NOMBRE, PT.RECEPCION_DOCUMENTO
              )
  	LOOP
      BEGIN
        SELECT ID_PROCESO, NOMBRE, RECEPCION_DOCUMENTO, ACTIVO
          INTO VID_PROCESO, VNOMBRE, VRECEPCION_DOCUMENTO, VACTIVO
        FROM SDB_ACC_PROCESO
        WHERE ID_PROCESO = VREC_PROC.ID_PROCESO;
            BEGIN
              UPDATE SDB_ACC_PROCESO
              SET NOMBRE = CASE WHEN NOMBRE <> VREC_PROC.NOMBRE THEN VREC_PROC.NOMBRE ELSE NOMBRE END 
                ,RECEPCION_DOCUMENTO = CASE WHEN RECEPCION_DOCUMENTO <> VREC_PROC.RECEPCION_DOCUMENTO THEN VREC_PROC.RECEPCION_DOCUMENTO ELSE RECEPCION_DOCUMENTO END 
                ,ACTIVO = 'S'
                ,ID_USUARIO_MODIFICACION = VID_USUARIO_MODIFICACION
                ,FECHA_MODIFICACION = VFECHA_MODIFICACION
                ,IP_MODIFICACION = VIP_MODIFICACION
              WHERE ID_PROCESO = VREC_PROC.ID_PROCESO
              and (NOMBRE <> VREC_PROC.NOMBRE or RECEPCION_DOCUMENTO <> VREC_PROC.RECEPCION_DOCUMENTO);
                    EXCEPTION WHEN OTHERS THEN
                      PLRETORNO := -30;
                      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PLRETORNO) || ', ERROR ACTUALIZANDO SDB_ACC_PROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                      PMENSAJE := SUBSTR(MENSAJE,1,500);
            END;
        EXCEPTION 
          WHEN NO_DATA_FOUND THEN
            BEGIN -- 
              INSERT INTO SDB_ACC_PROCESO
              (
                ID_PROCESO
                ,NOMBRE
                ,ID_USUARIO_CREACION
                ,FECHA_CREACION
                ,IP_CREACION
                ,ID_USUARIO_MODIFICACION
                ,FECHA_MODIFICACION
                ,IP_MODIFICACION
                ,RECEPCION_DOCUMENTO
                ,ACTIVO
              ) 
              VALUES
              ( VREC_PROC.ID_PROCESO
                    ,VREC_PROC.NOMBRE
                    ,VID_USUARIO_INSERCION
                    ,VFECHA_MODIFICACION
                    ,VIP_CREACION
                    ,NULL
                    ,NULL
                    ,NULL
                    ,VREC_PROC.RECEPCION_DOCUMENTO
                    ,'S'
                );
              EXCEPTION WHEN OTHERS THEN
                PLRETORNO := -40;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || ', ERROR INSERTANTDO SDB_ACC_PROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
            END;
          WHEN OTHERS THEN
            PLRETORNO := -50;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR LEYENDO SDB_ACC_PROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
      END; 
    END LOOP;
    
-- 2. VERIFICA SUBPROCESOS: SI NO EXISTE LA CREA Y SI EXISTE ACTUALIZA
    FOR VREC_SUBPROC IN (SELECT MTT.ID_PROCESO, MTT.ID_SUBPROCESO, STT.NOMBRE, COUNT(*) CONTEO
                          FROM SDB_PGN_MOTIVO_TRAMITE_TRABAJO MTT
                          INNER JOIN SDB_ACC_SUBPROCESO_TRABAJO STT ON MTT.ID_PROCESO = STT.ID_PROCESO AND MTT.ID_SUBPROCESO = STT.ID_SUBPROCESO
                          WHERE MTT.ID_PROCESO = PID_PROCESO
                            AND MTT.ID_SUBPROCESO = PID_SUBPROCESO 
                            AND MTT.VERSION = PVERSION 
                            GROUP BY MTT.ID_PROCESO, MTT.ID_SUBPROCESO, STT.NOMBRE
              )
  	LOOP
      BEGIN
        SELECT ID_PROCESO, ID_SUBPROCESO, NOMBRE, ACTIVO
          INTO VID_PROCESO,VID_SUBPROCESO, VNOMBRE, VACTIVO
        FROM SDB_ACC_SUBPROCESO
        WHERE ID_PROCESO = VREC_SUBPROC.ID_PROCESO
          AND ID_SUBPROCESO = VREC_SUBPROC.ID_SUBPROCESO;
            BEGIN
              UPDATE SDB_ACC_SUBPROCESO
              SET NOMBRE = CASE WHEN NOMBRE <> VREC_SUBPROC.NOMBRE THEN VREC_SUBPROC.NOMBRE ELSE NOMBRE END 
                ,ACTIVO = 'S'
                ,ID_USUARIO_MODIFICACION = VID_USUARIO_MODIFICACION
                ,FECHA_MODIFICACION = VFECHA_MODIFICACION
                ,IP_MODIFICACION = VIP_MODIFICACION
              WHERE ID_PROCESO = VREC_SUBPROC.ID_PROCESO
                AND ID_SUBPROCESO = VREC_SUBPROC.ID_SUBPROCESO
                and NOMBRE <> VREC_SUBPROC.NOMBRE ;
                    EXCEPTION WHEN OTHERS THEN
                      PLRETORNO := -60;
                      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PLRETORNO) || ', ERROR ACTUALIZANDO SDB_ACC_SUBPROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                      PMENSAJE := SUBSTR(MENSAJE,1,500);
                      CONTINUE;
            END;
        EXCEPTION 
          WHEN NO_DATA_FOUND THEN
            null;
          WHEN OTHERS THEN
            PLRETORNO := -80;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR LEYENDO SDB_ACC_SUBPROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
            CONTINUE;
      END; 
      BEGIN -- 
              INSERT INTO SDB_ACC_SUBPROCESO
              (
                ID_PROCESO
                ,ID_SUBPROCESO
                ,NOMBRE
                ,ID_USUARIO_CREACION
                ,FECHA_CREACION
                ,IP_CREACION
                ,ID_USUARIO_MODIFICACION
                ,FECHA_MODIFICACION
                ,IP_MODIFICACION
                ,ACTIVO
              ) 
              VALUES
              ( VREC_SUBPROC.ID_PROCESO
                ,VREC_SUBPROC.ID_SUBPROCESO
                ,VREC_SUBPROC.NOMBRE
                ,VID_USUARIO_INSERCION
                ,VFECHA_MODIFICACION
                ,VIP_CREACION
                ,NULL
                ,NULL
                ,NULL
                ,'S'
              );
              EXCEPTION WHEN OTHERS THEN
                PLRETORNO := -70;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || ', ERROR INSERTANTDO SDB_ACC_SUBPROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
                CONTINUE;
      END;
    END LOOP;

--3. VERIFICA ETAPA: SI NO EXISTE LA CREA Y SI EXISTE ACTUALIZA ID_ETAPA_ORIGEN Y ID_ETAPA_POSTERIOR
    FOR VREC_ETAPA IN (SELECT SDB_PGN_ETAPA_TRABAJO.ID_ETAPA
                              ,SDB_PGN_ETAPA_TRABAJO.NOMBRE
                              ,SDB_PGN_ETAPA_TRABAJO.DESCRIPCION
                              ,SDB_PGN_ETAPA_TRABAJO.ESTADO
                              ,SDB_PGN_ETAPA_TRABAJO.INDICADOR_PESO
                              ,SDB_PGN_ETAPA_TRABAJO.INDICADOR_BLOQUEO
                              ,SDB_PGN_ETAPA_TRABAJO.INDICADOR_DESBORDE
                              ,SDB_PGN_ETAPA_TRABAJO.DIAS_HABILES_NORMAL
                              ,SDB_PGN_ETAPA_TRABAJO.INDICADOR_TOPE
                              ,SDB_PGN_ETAPA_TRABAJO.TIPO_REPARTO
                              ,SDB_PGN_ETAPA_TRABAJO.CANTIDAD_TIEMPO_ESPERA
                              ,SDB_PGN_ETAPA_TRABAJO.ID_UNIDAD_TIEMPO_ESPERA
                              ,SDB_PGN_ETAPA_TRABAJO.GENERAR_QR
                              ,SDB_PGN_ETAPA_TRABAJO.ID_FASE 
                        FROM 
                        (SELECT NVA_FLUJO.ID_ETAPA
                              ,SUM(NVA_FLUJO.CONTEO)
                                  FROM (
                                  SELECT MTT.ID_ETAPA_ORIGEN ID_ETAPA, COUNT(*) CONTEO
                                  FROM SDB_PGN_MOTIVO_TRAMITE_TRABAJO MTT
                                  WHERE NVL(MTT.ID_ETAPA_ORIGEN,0) <> 0
                                    AND MTT.ID_PROCESO = PID_PROCESO
                                    AND MTT.ID_SUBPROCESO = PID_SUBPROCESO
                                    AND MTT.VERSION = PVERSION
                                    GROUP BY MTT.ID_ETAPA_ORIGEN
                                 UNION 
                                 SELECT MTT.ID_ETAPA_POSTERIOR ID_ETAPA, COUNT(*) CONTEO
                                  FROM SDB_PGN_MOTIVO_TRAMITE_TRABAJO MTT
                                  WHERE NVL(MTT.ID_ETAPA_POSTERIOR,0) <> 0
                                    AND MTT.ID_PROCESO = PID_PROCESO
                                    AND MTT.ID_SUBPROCESO = PID_SUBPROCESO
                                    AND MTT.VERSION = PVERSION 
                                    GROUP BY MTT.ID_ETAPA_POSTERIOR
                                  ) NVA_FLUJO
                                  GROUP BY NVA_FLUJO.ID_ETAPA
                                  ORDER BY NVA_FLUJO.ID_ETAPA
                                  ) EF 
                                  INNER JOIN SDB_PGN_ETAPA_TRABAJO ON EF.ID_ETAPA = SDB_PGN_ETAPA_TRABAJO.ID_ETAPA
                      )
  	LOOP
      BEGIN
        SELECT ID_ETAPA, NOMBRE, ESTADO
          INTO VID_ETAPA,VNOMBRE, VESTADO
        FROM SDB_PGN_ETAPA
        WHERE ID_ETAPA = VREC_ETAPA.ID_ETAPA;
/* 
          BEGIN
              UPDATE SDB_ACC_SUBPROCESO
              SET NOMBRE = CASE WHEN NOMBRE <> VREC_SUBPROC.NOMBRE THEN VREC_SUBPROC.NOMBRE ELSE NOMBRE END 
                ,ACTIVO = 'S'
                ,ID_USUARIO_MODIFICACION = VID_USUARIO_MODIFICACION
                ,FECHA_MODIFICACION = VFECHA_MODIFICACION
                ,IP_MODIFICACION = VIP_MODIFICACION
              WHERE ID_PROCESO = VREC_SUBPROC.ID_PROCESO
                AND ID_SUBPROCESO = VREC_SUBPROC.ID_SUBPROCESO
                and NOMBRE <> VREC_SUBPROC.NOMBRE ;
                    EXCEPTION WHEN OTHERS THEN
                      PLRETORNO := -70;
                      MENSAJE := SUBSTR(PRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PLRETORNO) || ', ERROR ACTUALIZANDO SDB_ACC_SUBPROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
                      PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                      PMENSAJE := SUBSTR(MENSAJE,1,500);
            END;
*/            
        EXCEPTION 
          WHEN NO_DATA_FOUND THEN
            BEGIN -- 
              INSERT INTO SDB_PGN_ETAPA
              (ID_ETAPA
              ,NOMBRE
              ,DESCRIPCION
              ,ESTADO
              ,INDICADOR_PESO
              ,INDICADOR_BLOQUEO
              ,INDICADOR_DESBORDE
              ,DIAS_HABILES_NORMAL
              ,INDICADOR_TOPE
              ,TIPO_REPARTO
              ,CANTIDAD_TIEMPO_ESPERA
              ,ID_USUARIO_CREACION
              ,FECHA_CREACION
              ,ID_USUARIO_MODIFICACION
              ,FECHA_MODIFICACION
              ,IP_CREACION
              ,IP_MODIFICACION
              ,ID_UNIDAD_TIEMPO_ESPERA
              ,GENERAR_QR
              ,ID_FASE
              ) 
              VALUES
              ( VREC_ETAPA.ID_ETAPA
                ,VREC_ETAPA.NOMBRE
                ,VREC_ETAPA.DESCRIPCION
                ,VREC_ETAPA.ESTADO
                ,VREC_ETAPA.INDICADOR_PESO
                ,VREC_ETAPA.INDICADOR_BLOQUEO
                ,VREC_ETAPA.INDICADOR_DESBORDE
                ,VREC_ETAPA.DIAS_HABILES_NORMAL
                ,VREC_ETAPA.INDICADOR_TOPE
                ,VREC_ETAPA.TIPO_REPARTO
                ,VREC_ETAPA.CANTIDAD_TIEMPO_ESPERA
                ,VID_USUARIO_INSERCION
                ,VFECHA_MODIFICACION
                ,NULL
                ,NULL
                ,VIP_CREACION
                ,NULL
                ,VREC_ETAPA.ID_UNIDAD_TIEMPO_ESPERA
                ,VREC_ETAPA.GENERAR_QR
                ,VREC_ETAPA.ID_FASE
              );
              EXCEPTION WHEN OTHERS THEN
                PLRETORNO := -90;
                MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || ', ERROR INSERTANTDO SDB_PGN_ETAPA PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
                PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_PGN_ETAPA',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),TO_CHAR(VREC_ETAPA.ID_ETAPA),NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                PMENSAJE := SUBSTR(MENSAJE,1,500);
            END;
          WHEN OTHERS THEN
            PLRETORNO := -100;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR LEYENDO SDB_PGN_ETAPA PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| ', ETAPA:'||TO_CHAR(VREC_ETAPA.ID_ETAPA)||'. '|| SQLERRM,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_PGN_ETAPA',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),TO_CHAR(VREC_ETAPA.ID_ETAPA),NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
      END; 
    END LOOP;

--4. VERIFICA SUBPROCESO VERSION: SI NO EXISTE LA CREA Y SI EXISTE ACTUALIZA VERIFICA EL ESTADO SI ESTA ACTIVA LA ACTUALIZA SI NO GENERA MENSAJE DE ERROR.
    FOR VREC_SUBPROCV IN (SELECT MTT.ID_PROCESO
                                ,MTT.ID_SUBPROCESO
                                ,MTT.VERSION
                                ,MTT.ID_ETAPA_INICIAL
                                ,MTT.ESTADO_ACTIVIDAD
                                ,MTT.SOLICITUD_CERTIFICADO
                                ,MTT.PLANTILLA
                                ,MTT.OBTENER_RECIBO_CAJA
                                ,MTT.CONSERVACION_DOCUMENTAL
                                ------------------------------------------------,MTT.DEFINICION
                                ,MTT.ESTADO_FLUJO
                          FROM SDB_ACC_SUBPROCESO_VERSION_TRABAJO MTT 
                          WHERE MTT.ID_PROCESO = PID_PROCESO
                            AND MTT.ID_SUBPROCESO = PID_SUBPROCESO 
                            AND MTT.VERSION = PVERSION 
                            AND EXISTS (SELECT 1 FROM SDB_PGN_MOTIVO_TRAMITE_TRABAJO MTV 
                                WHERE MTT.ID_PROCESO = MTV.ID_PROCESO AND MTT.ID_SUBPROCESO = MTV.ID_SUBPROCESO AND MTT.VERSION = MTV.VERSION)
                          )
  	LOOP
      BEGIN
        SELECT  SDB_ACC_SUBPROCESO_VERSION.ID_PROCESO, SDB_ACC_SUBPROCESO_VERSION.ID_SUBPROCESO ,max(SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO)
          INTO VID_PROCESO,VID_SUBPROCESO, VVERSION
        FROM SDB_ACC_SUBPROCESO_VERSION
        WHERE ID_PROCESO = VREC_SUBPROCV.ID_PROCESO
          AND ID_SUBPROCESO = VREC_SUBPROCV.ID_SUBPROCESO
          group by SDB_ACC_SUBPROCESO_VERSION.ID_PROCESO, SDB_ACC_SUBPROCESO_VERSION.ID_SUBPROCESO;
          VVERSION_NVA := VVERSION + 1;
--          AND VERSION_SUBPROCESO = VREC_SUBPROCV.VERSION ;
--              PLRETORNO := -110;
--              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR: YA EXISTE FLUNO EN SDB_ACC_SUBPROCESO_VERSION PARA: ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
--              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_SUBPROCESO_VERSION',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
--              PMENSAJE := SUBSTR(MENSAJE,1,500);
--              RETURN;
        EXCEPTION 
          WHEN NO_DATA_FOUND THEN
          VVERSION_NVA := 1;
          WHEN OTHERS THEN
            PLRETORNO := -130;
            MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR LEYENDO SDB_ACC_SUBPROCESO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
            PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
            PMENSAJE := SUBSTR(MENSAJE,1,500);
            RETURN;
      END; 
          BEGIN -- 
            INSERT INTO SDB_ACC_SUBPROCESO_VERSION 
            (ID_PROCESO
              ,ID_SUBPROCESO
              ,VERSION_SUBPROCESO
              ,ID_ETAPA_INICIAL
              ,ESTADO_ACTIVIDAD
              ------------------------------------------------------------------,DEFINICION
              ,SOLICITUD_CERTIFICADO
              ,PLANTILLA
              ,CONSERVACION_DOCUMENTAL
              ,OBTENER_RECIBO_CAJA
              ,ESTADO_FLUJO
              ,ID_USUARIO_CREACION
              ,FECHA_CREACION
              ,IP_CREACION
              ,ID_USUARIO_MODIFICACION
              ,FECHA_MODIFICACION
              ,IP_MODIFICACION
              ) 
            VALUES
            ( VREC_SUBPROCV.ID_PROCESO
              ,VREC_SUBPROCV.ID_SUBPROCESO
              ,VVERSION_NVA
              ,VREC_SUBPROCV.ID_ETAPA_INICIAL
              ,VREC_SUBPROCV.ESTADO_ACTIVIDAD
              ,VREC_SUBPROCV.SOLICITUD_CERTIFICADO
              ,VREC_SUBPROCV.PLANTILLA
              ,VREC_SUBPROCV.CONSERVACION_DOCUMENTAL
              ,VREC_SUBPROCV.OBTENER_RECIBO_CAJA
              ----------------------------------------------------------------,VREC_SUBPROCV.DEFINICION
              ,VREC_SUBPROCV.ESTADO_FLUJO
              ,VID_USUARIO_INSERCION
              ,VFECHA_MODIFICACION
              ,VIP_CREACION
              ,NULL
              ,NULL
              ,NULL
            );
            BEGIN
              UPDATE SDB_ACC_SUBPROCESO_VERSION_TRABAJO
              SET VERSION_DEFINITIVA_APROBADA = VVERSION_NVA
              WHERE ID_PROCESO = VREC_SUBPROCV.ID_PROCESO
                AND ID_SUBPROCESO = VREC_SUBPROCV.ID_SUBPROCESO
                AND VERSION = VREC_SUBPROCV.VERSION;
                EXCEPTION WHEN OTHERS THEN
              PLRETORNO := -118;
              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.UPDATE. '|| TO_CHAR(PLRETORNO) || ', ERROR ACTUALIZANDO SDB_ACC_SUBPROCESO_VERSION_TRABAJO PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_SUBPROCESO_VERSION_TRABAJO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,500);
              RETURN;
            END; 
            EXCEPTION WHEN OTHERS THEN
              PLRETORNO := -120;
              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || ', ERROR INSERTANTDO SDB_ACC_SUBPROCESO_VERSION PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION|| '. '|| SQLERRM,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_SUBPROCESO_VERSION',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,500);
              RETURN;
          END;
   
-- 5. MOTIVO_TRAMITE: SI NO EXISTE LA CREA Y SI EXISTE ACTUALIZA VERIFICA EL ESTADO SI ESTA ACTIVA LA ACTUALIZA SI NO GENERA MENSAJE DE ERROR.
    FOR VREC_MTT IN (SELECT ID_MOTIVO_TRAMITE
                        ,ID_PROCESO
                        ,ID_SUBPROCESO
                        ,VERSION
                        ,ID_MOTIVO
                        ,DESCRIPCION
                        ,ID_ETAPA_ORIGEN
                        ,ID_ETAPA_POSTERIOR
                        ,ESTADO_ACTIVIDAD
                        ,INDICADOR_DEVOLUCION
                        ,TIPO_COMPUERTA_LLEGADA
                        ,DECISION_CALIFICACION
                        ,FLUJO_DEFECTO
                        ,DESCRIPTOR_FIN
                        ,ESTADO
                    FROM SDB_PGN_MOTIVO_TRAMITE_TRABAJO MTT
                    WHERE MTT.ID_PROCESO = PID_PROCESO
                      AND MTT.ID_SUBPROCESO = PID_SUBPROCESO 
                      AND MTT.VERSION = PVERSION 
                )
    LOOP
      BEGIN
          SELECT ID_MOTIVO_TRAMITE, ID_PROCESO, ID_SUBPROCESO, VERSION_SUBPROCESO, ID_MOTIVO, ID_ETAPA_ORIGEN, ID_ETAPA_POSTERIOR
            INTO VID_MOTIVO_TRAMITE, VID_PROCESO, VID_SUBPROCESO, VVERSION, VID_MOTIVO, VID_ETAPA_ORIGEN, VID_ETAPA_POSTERIOR
          FROM SDB_PGN_MOTIVO_TRAMITE
          WHERE ID_PROCESO = VREC_MTT.ID_PROCESO
            AND ID_SUBPROCESO = VREC_MTT.ID_SUBPROCESO
            AND VERSION_SUBPROCESO = VVERSION_NVA 
            AND ID_MOTIVO = VREC_MTT.ID_MOTIVO
            AND ID_ETAPA_ORIGEN = VREC_MTT.ID_ETAPA_ORIGEN
            AND ID_ETAPA_POSTERIOR = VREC_MTT.ID_ETAPA_POSTERIOR;
          EXCEPTION 
            WHEN NO_DATA_FOUND THEN
              BEGIN  
                INSERT INTO SDB_PGN_MOTIVO_TRAMITE 
                (ID_MOTIVO_TRAMITE
                  ,ID_PROCESO
                  ,ID_SUBPROCESO
                  ,VERSION_SUBPROCESO
                  ,ID_MOTIVO
                  ,DESCRIPCION
                  ,ID_ETAPA_ORIGEN
                  ,ID_ETAPA_POSTERIOR
                  ,ESTADO_ACTIVIDAD
                  ,INDICADOR_DEVOLUCION
                  ,TIPO_COMPUERTA_LLEGADA
                  ,DECISION_CALIFICACION
                  ,FLUJO_DEFECTO
                  ,DESCRIPTOR_FIN
                  ,ESTADO
                  ,ID_USUARIO_CREACION
                  ,FECHA_CREACION
                  ,IP_CREACION
                  ,ID_USUARIO_MODIFICACION
                  ,FECHA_MODIFICACION
                  ,IP_MODIFICACION
                  ) 
                VALUES
                ( VREC_MTT.ID_MOTIVO_TRAMITE
                        ,VREC_MTT.ID_PROCESO
                        ,VREC_MTT.ID_SUBPROCESO
                        ,VVERSION_NVA
                        ,VREC_MTT.ID_MOTIVO
                        ,VREC_MTT.DESCRIPCION
                        ,VREC_MTT.ID_ETAPA_ORIGEN
                        ,VREC_MTT.ID_ETAPA_POSTERIOR
                        ,VREC_MTT.ESTADO_ACTIVIDAD
                        ,VREC_MTT.INDICADOR_DEVOLUCION
                        ,VREC_MTT.TIPO_COMPUERTA_LLEGADA
                        ,VREC_MTT.DECISION_CALIFICACION
                        ,VREC_MTT.FLUJO_DEFECTO
                        ,VREC_MTT.DESCRIPTOR_FIN
                        ,VREC_MTT.ESTADO
                  ,VID_USUARIO_INSERCION
                  ,VFECHA_MODIFICACION
                  ,VIP_CREACION
                  ,NULL
                  ,NULL
                  ,NULL
                 );
                EXCEPTION WHEN OTHERS THEN
                  PLRETORNO := -120;
                  MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || ', ERROR INSERTANTDO SDB_PGN_MOTIVO_TRAMITE PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION||', ID_MOTIVO_TRAMITE:'||VID_MOTIVO_TRAMITE || '. '|| SQLERRM,1,500);
                  PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_PGN_MOTIVO_TRAMITE',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                  PMENSAJE := SUBSTR(MENSAJE,1,500);
                  RETURN;
              END;
            WHEN OTHERS THEN
              PLRETORNO := -130;
              MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR LEYENDO SDB_PGN_MOTIVO_TRAMITE PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION||', ID_MOTIVO_TRAMITE:'||VID_MOTIVO_TRAMITE || '. '|| SQLERRM,1,500);
              PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_ACC_PROCESO',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
              PMENSAJE := SUBSTR(MENSAJE,1,500);
              RETURN;
        END;
-- 6. MOTIVO_TRAMITE_REGLA: SI NO EXISTE LA CREA.
        FOR  VREC_MTRT IN  ( SELECT ID_MOTIVO_TRAMITE,
                                ID_REGLA_NEGOCIO,
                                ORDEN,
                                ACTIVO
                              FROM SDB_PGN_MOTIVO_TRAMITE_REGLA_TRABAJO
                              WHERE ID_MOTIVO_TRAMITE = VREC_MTT.ID_MOTIVO_TRAMITE
                              AND ACTIVO = 'S'
                            )
            LOOP
                BEGIN
                    SELECT ID_MOTIVO_TRAMITE, ID_REGLA_NEGOCIO
                        INTO VID_MOTIVO_TRAMITE, VID_REGLA_NEGOCIO
                    FROM SDB_PGN_MOTIVO_TRAMITE_REGLA
                    WHERE ID_MOTIVO_TRAMITE = VREC_MTRT.ID_MOTIVO_TRAMITE
                        AND ID_REGLA_NEGOCIO = VREC_MTRT.ID_REGLA_NEGOCIO;
                    
                  EXCEPTION 
                    WHEN NO_DATA_FOUND THEN
                    BEGIN  
                        INSERT INTO SDB_PGN_MOTIVO_TRAMITE_REGLA
                         (  ID_MOTIVO_TRAMITE,
                            ID_REGLA_NEGOCIO,
                            ORDEN,
                            ACTIVO,
                            ID_USUARIO_CREACION,
                            FECHA_CREACION,
                            IP_CREACION)
                        VALUES(VREC_MTRT.ID_MOTIVO_TRAMITE,
                            VREC_MTRT.ID_REGLA_NEGOCIO,
                            VREC_MTRT.ORDEN,
                            'S',
                            VID_USUARIO_INSERCION,
                            VFECHA_MODIFICACION,
                            VIP_CREACION);
                        EXCEPTION WHEN OTHERS THEN
                        PLRETORNO := -140;
                        MENSAJE := SUBSTR(PRMER_MENSAJE ||'.INSERT. '|| TO_CHAR(PLRETORNO) || ', ERROR INSERTANTDO SDB_PGN_MOTIVO_TRAMITE_REGLA PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION||', ID_MOTIVO_TRAMITE:'||VID_MOTIVO_TRAMITE || '. '|| SQLERRM,1,500);
                        PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_PGN_MOTIVO_TRAMITE_REGLA',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                        PMENSAJE := SUBSTR(MENSAJE,1,500);
                        RETURN;
                    END;
                    WHEN OTHERS THEN
                    PLRETORNO := -150;
                    MENSAJE := SUBSTR(PRMER_MENSAJE ||'.SELECT. '|| TO_CHAR(PLRETORNO) || ', ERROR LEYENDO SDB_PGN_MOTIVO_TRAMITE_REGLA PARA EL FLUJO ID_PROCESO:'||PID_PROCESO||', ID_SUBPROCESO:'||PID_SUBPROCESO||', VERSION:'|| PVERSION||', ID_MOTIVO_TRAMITE:'||VID_MOTIVO_TRAMITE || '. '|| SQLERRM,1,500);
                    PKG_TRANSVERSALES.PROC_BITACORA(VPROCESO,MENSAJE,VID_USUARIO_INSERCION,VIP_CREACION,VID_USUARIO_MODIFICACION,VFECHA_MODIFICACION,VIP_MODIFICACION,'SDB_PGN_MOTIVO_TRAMITE_REGLA',PID_PROCESO,PID_SUBPROCESO,TO_CHAR(PVERSION),NULL,NULL,NULL,NULL,NULL,VEJECUCION,VRETORNO,VMENSAJE);
                    PMENSAJE := SUBSTR(MENSAJE,1,500);
                    RETURN;
                    
                END;
            END LOOP;
      END LOOP;
    END LOOP;
  END PROC_APRUEBA_FLUJO;
    ------------------
    -----FUNCIONES----
    ------------------
    FUNCTION FUNC_ULTIMA_VERSION (LID_PROCESO VARCHAR2,LID_SUBPROCESO VARCHAR2) RETURN NUMBER AS
     --PRAGMA AUTONOMOUS_TRANSACTION;
     VL_VERSION NUMBER;
    BEGIN
      SELECT MAX(SDB_ACC_SUBPROCESO_VERSION.VERSION_SUBPROCESO ) 
      INTO VL_VERSION 
      FROM SDB_ACC_SUBPROCESO
      INNER JOIN SDB_ACC_SUBPROCESO_VERSION ON SDB_ACC_SUBPROCESO.ID_PROCESO = SDB_ACC_SUBPROCESO_VERSION.ID_PROCESO 
                                            AND SDB_ACC_SUBPROCESO.ID_SUBPROCESO = SDB_ACC_SUBPROCESO_VERSION.ID_SUBPROCESO
      WHERE SDB_ACC_SUBPROCESO_VERSION.ID_PROCESO = LID_PROCESO AND SDB_ACC_SUBPROCESO_VERSION.ID_SUBPROCESO = LID_SUBPROCESO;
      RETURN VL_VERSION;
      EXCEPTION WHEN OTHERS THEN
        RETURN -1;
    END FUNC_ULTIMA_VERSION;
    
    FUNCTION FUNC_ULTIMA_VERSION_TRABAJO (LID_PROCESO VARCHAR2,LID_SUBPROCESO VARCHAR2) RETURN NUMBER AS
     --PRAGMA AUTONOMOUS_TRANSACTION;
     VL_VERSION NUMBER;
    BEGIN
      SELECT MAX(SDB_ACC_SUBPROCESO_VERSION_TRABAJO.VERSION) 
      INTO VL_VERSION 
      FROM SDB_ACC_SUBPROCESO_TRABAJO
      INNER JOIN SDB_ACC_SUBPROCESO_VERSION_TRABAJO ON SDB_ACC_SUBPROCESO_TRABAJO.ID_PROCESO = SDB_ACC_SUBPROCESO_VERSION_TRABAJO.ID_PROCESO 
                                            AND SDB_ACC_SUBPROCESO_TRABAJO.ID_SUBPROCESO = SDB_ACC_SUBPROCESO_VERSION_TRABAJO.ID_SUBPROCESO
      WHERE SDB_ACC_SUBPROCESO_VERSION_TRABAJO.ID_PROCESO = LID_PROCESO AND SDB_ACC_SUBPROCESO_VERSION_TRABAJO.ID_SUBPROCESO = LID_SUBPROCESO;
      RETURN VL_VERSION;
      EXCEPTION WHEN OTHERS THEN
        RETURN -1;
    END FUNC_ULTIMA_VERSION_TRABAJO;
    
   FUNCTION FUNC_VER_PARALELAS (PLID_TURNO_HISTORIA NUMBER, PLID_MOTIVO NUMBER) RETURN NUMBER AS
    --PRAGMA AUTONOMOUS_TRANSACTION;
     VPARALELAS 		INTEGER := 0;
     VSQL VARCHAR2(4000);
     VID_SOLICITUD	SDB_ACC_TURNO_HISTORIA.ID_SOLICITUD%TYPE;
     VID_TURNO		SDB_ACC_TURNO_HISTORIA.ID_TURNO%TYPE;
     VID_PROCESO		SDB_ACC_TURNO_HISTORIA.ID_PROCESO%TYPE;
     VID_SUBPROCESO	SDB_ACC_TURNO_HISTORIA.ID_SUBPROCESO%TYPE;
     VVERSION			SDB_ACC_TURNO_HISTORIA.VERSION_SUBPROCESO%TYPE;
     VID_MOTIVO		SDB_ACC_TURNO_HISTORIA.ID_MOTIVO%TYPE;
     VID_ETAPA_POSTERIOR	SDB_PGN_MOTIVO_TRAMITE.ID_ETAPA_POSTERIOR%TYPE;
     VMOTIVO        SDB_ACC_TURNO_HISTORIA.MOTIVO%TYPE;
    BEGIN
      BEGIN
        SELECT TH.ID_SOLICITUD,TH.ID_TURNO,TH.ID_PROCESO,TH.ID_SUBPROCESO,TH.VERSION_SUBPROCESO,TH.ID_MOTIVO,MT.ID_ETAPA_POSTERIOR,TH.MOTIVO
        INTO VID_SOLICITUD,VID_TURNO,VID_PROCESO,VID_SUBPROCESO,VVERSION,VID_MOTIVO,VID_ETAPA_POSTERIOR, VMOTIVO
        FROM SDB_ACC_TURNO_HISTORIA TH
        INNER JOIN SDB_PGN_MOTIVO_TRAMITE MT ON TH.ID_ETAPA = MT.ID_ETAPA_ORIGEN AND TH.ID_PROCESO = MT.ID_PROCESO AND TH.ID_SUBPROCESO = MT.ID_SUBPROCESO
            AND TH.VERSION_SUBPROCESO = MT.VERSION_SUBPROCESO 
        WHERE ID_TURNO_HISTORIA = PLID_TURNO_HISTORIA
        AND MT.ID_MOTIVO = PLID_MOTIVO;
        
          VSQL := 'SELECT COUNT(*) '||
          ' FROM SDB_ACC_TURNO_HISTORIA TH '||
           ' INNER JOIN SDB_PGN_MOTIVO_TRAMITE MT ON TH.ID_ETAPA = MT.ID_ETAPA_ORIGEN AND TH.ID_PROCESO = MT.ID_PROCESO AND TH.ID_SUBPROCESO = MT.ID_SUBPROCESO'||
           ' AND TH.VERSION_SUBPROCESO = MT.VERSION_SUBPROCESO '||
           ' where TH.ID_TURNO_HISTORIA <> '|| TO_CHAR(PLID_TURNO_HISTORIA) ||
           ' AND TIPO_COMPUERTA_LLEGADA = ''PAR'''|| 
           ' AND MT.ID_ETAPA_POSTERIOR = ''' ||VID_ETAPA_POSTERIOR||''''||
           ' AND TH.ESTADO_ACTIVIDAD <> ''TER'''||
           ' AND TH.ID_PROCESO = '''||VID_PROCESO||''''||
           ' AND TH.ID_SUBPROCESO = '''||VID_SUBPROCESO||''''||
           ' AND TH.VERSION_SUBPROCESO = '||TO_CHAR(VVERSION)||
            CASE WHEN NVL(VID_TURNO,'NULL') <> 'NULL' THEN  ' AND TH.ID_TURNO = '''||VID_TURNO||''''
              ELSE CASE WHEN NVL(VID_SOLICITUD,'NULL') <> 'NULL' THEN ' AND TH.ID_SOLICITUD = '''||VID_SOLICITUD||'''' ELSE 'AND 1>2' END END ;
          BEGIN 
-- MENSAJES(VSQL);
          EXECUTE IMMEDIATE VSQL INTO VPARALELAS ;
             EXCEPTION WHEN OTHERS THEN
             VPARALELAS := 0;
          END;
        EXCEPTION WHEN NO_DATA_FOUND THEN
        VPARALELAS := 0;
        WHEN OTHERS THEN
        VPARALELAS := -2;
      END;
		RETURN VPARALELAS;
  END FUNC_VER_PARALELAS;
  
  FUNCTION FUNC_VENCIMIENTO_ETAPA(PID_ETAPA NUMBER, PID_CIRCULO VARCHAR2, FECHA_INICIO DATE) RETURN DATE AS
    VID_UNIDAD_TIEMPO_ESPERA SDB_PGN_ETAPA.ID_UNIDAD_TIEMPO_ESPERA%TYPE;
    VCANTIDAD_TIEMPO_ESPERA SDB_PGN_ETAPA.CANTIDAD_TIEMPO_ESPERA%TYPE;
    VFECHA_VENCIMIENTO SDB_ACC_TURNO_HISTORIA.FECHA_VENCIMIENTO%TYPE;
  BEGIN
    BEGIN
      SELECT ID_UNIDAD_TIEMPO_ESPERA, CANTIDAD_TIEMPO_ESPERA
      INTO VID_UNIDAD_TIEMPO_ESPERA, VCANTIDAD_TIEMPO_ESPERA
      FROM SDB_PGN_ETAPA
      WHERE ID_ETAPA = PID_ETAPA;
        BEGIN
          VFECHA_VENCIMIENTO := PKG_TRANSVERSALES.FUNC_FECHA_VENCE_TERMINOS(
            PFECHA_INICIAL => FECHA_INICIO,
            PTIPO_CALENDARIO => VID_UNIDAD_TIEMPO_ESPERA,
            PCIRCULO => PID_CIRCULO,
            PDIAS => VCANTIDAD_TIEMPO_ESPERA
          );
        END;
      EXCEPTION WHEN OTHERS THEN 
        VFECHA_VENCIMIENTO := NULL;
    END;   
    RETURN VFECHA_VENCIMIENTO;
  END FUNC_VENCIMIENTO_ETAPA;
END PKG_WORKFLOW;

/


